// auto-generated: "lalrpop 0.19.1"
// sha256: d03fb082ffe74c2582122e7c1eecf36b7f0daf9ab511b7bff705e5c92eb2d
use rsh_ast::*;
use rsh_common::{
    src::{Loc, Span, Spanned},
    BinaryOp, EntryPointStage, GlobalBinding, Ident, Literal, ScalarType, Symbol, UnaryOp,
    VectorSize, Field, FieldKind
};
use rsh_lexer::{Token, LexerError};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Program {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use rsh_ast::*;
    use rsh_common::{
    src::{Loc, Span, Spanned},
    BinaryOp, EntryPointStage, GlobalBinding, Ident, Literal, ScalarType, Symbol, UnaryOp,
    VectorSize, Field, FieldKind
};
    use rsh_lexer::{Token, LexerError};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(bool),
        Variant2(f64),
        Variant3(EntryPointStage),
        Variant4(Symbol),
        Variant5(i64),
        Variant6(ScalarType),
        Variant7(u64),
        Variant8(GenericBound),
        Variant9(::std::option::Option<GenericBound>),
        Variant10(Ty),
        Variant11(::std::option::Option<Ty>),
        Variant12(()),
        Variant13(Expr),
        Variant14(::std::vec::Vec<Expr>),
        Variant15(GenericParam),
        Variant16(::std::vec::Vec<GenericParam>),
        Variant17(IdentTypePair),
        Variant18(::std::vec::Vec<IdentTypePair>),
        Variant19(Stmt),
        Variant20(::std::vec::Vec<Stmt>),
        Variant21(StructField),
        Variant22(::std::vec::Vec<StructField>),
        Variant23(::std::vec::Vec<Ty>),
        Variant24(Loc),
        Variant25(BinaryOp),
        Variant26(ExprKind),
        Variant27(TypeKind),
        Variant28(Block),
        Variant29(Box<Expr>),
        Variant30(::std::option::Option<Box<Expr>>),
        Variant31(Vec<Expr>),
        Variant32(Vec<GenericParam>),
        Variant33(Vec<IdentTypePair>),
        Variant34(Vec<StructField>),
        Variant35(Vec<Ty>),
        Variant36(Constant),
        Variant37((ConstructorType, VectorSize)),
        Variant38(ElseIf),
        Variant39(::std::option::Option<Expr>),
        Variant40(Field),
        Variant41(FieldKind),
        Variant42(::std::option::Option<Stmt>),
        Variant43(Function),
        Variant44(FnSig),
        Variant45(GenericBoundKind),
        Variant46(::std::option::Option<GenericParam>),
        Variant47(Generics),
        Variant48(GlobalBinding),
        Variant49(Ident),
        Variant50(::std::option::Option<IdentTypePair>),
        Variant51(Item),
        Variant52(::std::vec::Vec<Item>),
        Variant53(Literal),
        Variant54(Local),
        Variant55(u32),
        Variant56(Spanned<BinaryOp>),
        Variant57(Spanned<UnaryOp>),
        Variant58(StmtKind),
        Variant59(StructKind),
        Variant60(::std::option::Option<StructField>),
        Variant61(UnaryOp),
        Variant62(VectorSize),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 90, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 90, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 95, 96, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 54, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 189,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 21, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105,
        // State 36
        0, -42, 0, -42, -42, 0, -42, 0, 205, -42, 206, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, 0, -42, -42, -42, 0, 0, 0, 0, -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, -42, -42,
        // State 37
        0, -56, 0, 207, -56, 0, -56, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, -56, -56, 0, -56, -56, -56, 0, 0, 0, 0, -56, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, -56, -56, -56,
        // State 38
        0, -58, 0, 0, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, -58, 0, -58, -58, -58, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 208, -58, -58,
        // State 39
        0, -60, 0, 0, -60, 0, -60, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, -60, 0, -60, -60, -60, 0, 0, 0, 0, -60, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, -60, -60,
        // State 40
        0, -124, 0, 0, -124, 0, -124, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 210, 211, 0, -124, 212, 213, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, -124, -124,
        // State 41
        0, 214, 0, 0, -140, 0, -140, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, -140, -140,
        // State 42
        0, 0, 0, 0, 216, 0, -194, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, -194, -194,
        // State 43
        0, 0, 0, 0, 0, 0, -196, 0, 0, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, 0, 217, -196,
        // State 44
        0, -198, 218, -198, -198, 0, -198, 219, -198, -198, -198, 0, 0, 0, 220, 0, 0, 0, 0, -198, -198, -198, 0, -198, -198, -198, 0, 0, 0, 0, -198, -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, -198, -198, -198,
        // State 45
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 46
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 47
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 48
        164, 0, 0, 0, 0, 47, -144, 0, 0, -144, 165, 0, 0, 0, 0, 120, 121, 122, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, -144, 0, 0, -144,
        // State 49
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 54, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 232,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 21, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        164, 0, 0, 0, 0, 47, -93, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 59
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 60
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 61
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 62
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 63
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 64
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 65
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 66
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 67
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 68
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 69
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 21, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        164, 0, 0, 0, 0, 47, -95, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 76
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 77
        0, -138, -138, -138, -138, -138, -138, -138, -138, -138, -138, 0, -138, 0, -138, 0, 0, 0, 0, -138, -138, -138, 0, -138, -138, -138, 0, 0, 0, -138, -138, -138, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, -138, -138, -138,
        // State 78
        0, 0, 0, 0, 0, 21, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        164, 0, 0, 0, 0, 47, -93, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        164, 0, 0, 0, 0, 47, -93, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 86
        164, 0, 0, 0, 0, 47, 0, 0, 0, 0, 165, 0, 0, 0, 0, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 167, 0, 0, 0, 93, 48, 0, 168, 0, 169, 170, 171, 0, 0, 49, 0, 0, 0, 123, 0, 172, 173, 174, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, -185, 0, -185, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, -186, 0, -186, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, -170, -170, -170, -170, -170, -170, -170, -170, -170, -170, 0, -170, 0, -170, 0, 0, 0, -170, -170, -170, -170, -170, -170, -170, -170, 0, 0, 0, -170, -170, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, -170, -170, -170,
        // State 92
        0, -227, -227, -227, -227, -227, -227, -227, -227, -227, -227, 0, -227, 0, -227, 0, 0, 0, -227, -227, -227, -227, -227, -227, -227, -227, 0, 0, 0, -227, -227, -227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227, -227, -227, -227,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, 0, -181, 0, -181, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -177, 0, -177, 0, -177, 0, -177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, 0, -223, 0, -223, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, -250, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, 0, -250, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, 0, -250,
        // State 104
        0, 0, 0, 0, 0, 0, -52, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, -52, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, -52,
        // State 105
        0, 0, 0, 0, 0, 0, -252, 0, 0, -252, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252, 0, 0, -252, 0, -252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252, 0, 0, -252,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, -247, 0, 0, -247, 0, 0, 0, 0, 0, 0, 0, 0, 0, -247, 0, 0, -247, 0, -247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -247, 0, 0, -247,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, -53, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, -53, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, -53,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, 0, -180, 0, -180, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, -161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, -193, -193, -193, -193, 0, -193, -193, -193, -193, -193, 0, -193, 0, -193, 0, 0, 0, 0, -193, -193, -193, 0, -193, -193, -193, 0, 0, 0, -193, -193, -193, -193, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, -193, -193, -193,
        // State 119
        0, -253, -253, -253, -253, -253, -253, -253, -253, -253, -253, 0, -253, 0, -253, 0, 0, 0, 0, -253, -253, -253, 0, -253, -253, -253, 0, 0, 0, -253, -253, -253, -253, 0, 0, 0, 0, 0, 0, 0, 0, -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, -253, -253, -253,
        // State 120
        0, -254, -254, -254, -254, -254, -254, -254, -254, -254, -254, 0, -254, 0, -254, 0, 0, 0, 0, -254, -254, -254, 0, -254, -254, -254, 0, 0, 0, -254, -254, -254, -254, 0, 0, 0, 0, 0, 0, 0, 0, -254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, -254, -254, -254,
        // State 121
        0, -255, -255, -255, -255, -255, -255, -255, -255, -255, -255, 0, -255, 0, -255, 0, 0, 0, 0, -255, -255, -255, 0, -255, -255, -255, 0, 0, 0, -255, -255, -255, -255, 0, 0, 0, 0, 0, 0, 0, 0, -255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -255, -255, -255, -255,
        // State 122
        0, -256, -256, -256, -256, -256, -256, -256, -256, -256, -256, 0, -256, 0, -256, 0, 0, 0, 0, -256, -256, -256, 0, -256, -256, -256, 0, 0, 0, -256, -256, -256, -256, 0, 0, 0, 0, 0, 0, 0, 0, -256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256, -256, -256, -256,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, -118, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116,
        // State 130
        0, 0, 0, 0, 0, 0, 175, 0, 0, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, 0, -182, 0, -182, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, -100, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, -154, 0, -154, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, -221, 0, -221, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, -176, -176, -176, -176, 0, -176, -176, -176, -176, -176, 0, 58, 0, -176, 0, 0, 0, 0, -176, -176, -176, 0, -176, -176, -176, 0, 0, 0, -176, -176, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, -176, -176, -176,
        // State 143
        0, -231, 0, -231, -231, 0, -231, 0, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, -231, -231, 0, -231, -231, -231, 0, 0, 0, 0, -231, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, -231, -231, -231,
        // State 144
        0, -91, -91, -91, -91, -91, -91, -91, -91, -91, -91, 0, -91, 0, -91, 0, 0, 0, 0, -91, -91, -91, 0, -91, -91, -91, 0, 0, 0, -91, -91, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, -91, -91, -91,
        // State 145
        0, -46, -46, -46, -46, -46, -46, -46, -46, -46, -46, 0, -46, 0, -46, 0, 0, 0, 0, -46, -46, -46, 0, -46, -46, -46, 0, 0, 0, -46, -46, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, -46, -46, -46,
        // State 146
        0, -235, 0, 0, -235, 0, -235, 0, 0, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, -235, -235, 0, -235, -235, -235, 0, 0, 0, 0, -235, -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, -235, -235, -235,
        // State 147
        0, -237, 0, 0, -237, 0, -237, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, -237, -237, 0, -237, -237, -237, 0, 0, 0, 0, -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, -237, -237,
        // State 148
        0, -233, 0, 0, -233, 0, -233, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, -233, -233, 0, -233, -233, -233, 0, 0, 0, 0, -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, -233, -233, -233,
        // State 149
        0, -41, -41, -41, -41, 59, -41, -41, -41, -41, -41, 0, -41, 0, -41, 0, 0, 0, 0, -41, -41, -41, 0, -41, -41, -41, 0, 0, 0, -41, -41, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, -41, -41, -41,
        // State 150
        0, -239, 0, 0, -239, 0, -239, 0, 0, -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, -239, 0, 0, 0, -239, 0, 0, 0, 0, 0, 0, -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -239, 0, -239, -239,
        // State 151
        0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, -241, 0, -241, 0, 0, -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, 0, -241, -241,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, 0, -50, 0, -50, 0, 0, 0, 0, -50, -50, -50, 0, -50, -50, -50, 0, 0, 0, -50, -50, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, -50, -50,
        // State 155
        0, -51, -51, -51, -51, -51, -51, -51, -51, -51, -51, 0, -51, 0, -51, 0, 0, 0, 0, -51, -51, -51, 0, -51, -51, -51, 0, 0, 0, -51, -51, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, -51, -51, -51,
        // State 156
        0, -258, -258, -258, -258, 0, -258, -258, -258, -258, -258, 0, 0, 0, -258, 0, 0, 0, 0, -258, -258, -258, 0, -258, -258, -258, 0, 0, 0, 61, -258, -258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -258, -258, -258, -258,
        // State 157
        0, -47, -47, -47, -47, -47, -47, -47, -47, -47, -47, 0, -47, 0, -47, 0, 0, 0, 0, -47, -47, -47, 0, -47, -47, -47, 0, 0, 0, -47, -47, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, -47, -47, -47,
        // State 158
        0, 0, 0, 0, 0, 0, -243, 0, 0, -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, 0, -243, -243,
        // State 159
        0, 0, 0, 0, 0, 0, -145, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, -145,
        // State 160
        0, -229, 0, -229, -229, 0, -229, 0, -229, -229, -229, 0, 0, 0, 0, 0, 0, 0, 0, -229, -229, -229, 0, -229, -229, -229, 0, 0, 0, 0, -229, -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, -229, -229, -229,
        // State 161
        0, -187, -187, -187, -187, -187, -187, -187, -187, -187, -187, 0, -187, 0, -187, 0, 0, 0, 0, -187, -187, -187, 0, -187, -187, -187, 0, 0, 0, -187, -187, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, -187, -187, -187,
        // State 162
        0, -245, -245, -245, -245, 0, -245, -245, -245, -245, -245, 0, 0, 0, -245, 0, 0, 0, 0, -245, -245, -245, 0, -245, -245, -245, 0, 0, 0, 0, -245, -245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -245, -245, -245, -245,
        // State 163
        -259, 0, 0, 0, 0, -259, 0, 0, 0, 0, -259, 0, 0, 0, 0, -259, -259, -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -259, 0, 0, 0, -259, 0, 0, 0, -259, -259, 0, -259, 0, -259, -259, -259, 0, 0, 0, 0, 0, 0, -259, 0, -259, -259, -259, 0, 0, 0, 0,
        // State 164
        -260, 0, 0, 0, 0, -260, 0, 0, 0, 0, -260, 0, 0, 0, 0, -260, -260, -260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -260, 0, 0, 0, -260, 0, 0, 0, -260, -260, 0, -260, 0, -260, -260, -260, 0, 0, 0, 0, 0, 0, -260, 0, -260, -260, -260, 0, 0, 0, 0,
        // State 165
        0, -190, -190, -190, -190, -190, -190, -190, -190, -190, -190, 0, -190, 0, -190, 0, 0, 0, 0, -190, -190, -190, 0, -190, -190, -190, 0, 0, 0, -190, -190, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, -190, -190, -190,
        // State 166
        0, -189, -189, -189, -189, -189, -189, -189, -189, -189, -189, 0, -189, 0, -189, 0, 0, 0, 0, -189, -189, -189, 0, -189, -189, -189, 0, 0, 0, -189, -189, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, -189, -189, -189,
        // State 167
        0, -188, -188, -188, -188, -188, -188, -188, -188, -188, -188, 0, -188, 0, -188, 0, 0, 0, 0, -188, -188, -188, 0, -188, -188, -188, 0, 0, 0, -188, -188, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, -188, -188, -188,
        // State 168
        0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 174
        0, 0, 0, 0, 0, 0, -251, 0, 0, -251, 0, 0, 0, 0, 0, 0, 0, 0, 0, -251, 0, 0, -251, 0, -251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -251, 0, 0, -251,
        // State 175
        0, 0, 0, 0, 0, 0, -246, 0, 0, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, -246, 0, 0, -246, 0, -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -246, 0, 0, -246,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 0, 0, -263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, -102, 0, 0, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233,
        // State 185
        0, -50, -50, -50, -50, -50, 0, -50, -50, 0, -50, 0, -50, 0, -50, 0, 0, 0, 0, -50, -50, -50, 74, -50, -50, -50, 0, 0, 0, -50, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, -50, -50,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 188
        0, -63, -63, -63, -63, -63, -63, -63, -63, -63, -63, 0, -63, 0, -63, 0, 0, 0, 0, -63, -63, -63, 0, -63, -63, -63, 0, 0, 0, -63, -63, -63, 0, 0, -63, -63, -63, 0, -63, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, -63, -63, -63, -63,
        // State 189
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 192
        0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 193
        0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 194
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, 0, -179, 0, -179, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 195
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -178, 0, -178, 0, -178, 0, -178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -178, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 196
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 197
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, -222, 0, -222, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 199
        0, 0, 0, 0, 0, 0, -108, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, 0, -224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -224,
        // State 201
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117,
        // State 202
        0, 0, 0, 0, 0, 0, 0, 0, 0, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104,
        // State 203
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, -129, 0, -129, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 204
        -43, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, -43, 0, 0, 0, -43, -43, 0, -43, 0, -43, -43, -43, 0, 0, 0, 0, 0, 0, -43, 0, -43, -43, -43, 0, 0, 0, 0,
        // State 205
        -44, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, -44, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, -44, 0, 0, 0, -44, -44, 0, -44, 0, -44, -44, -44, 0, 0, 0, 0, 0, 0, -44, 0, -44, -44, -44, 0, 0, 0, 0,
        // State 206
        -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, -57, -57, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, -57, 0, 0, 0, -57, -57, 0, -57, 0, -57, -57, -57, 0, 0, 0, 0, 0, 0, -57, 0, -57, -57, -57, 0, 0, 0, 0,
        // State 207
        -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, -59, -59, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, -59, 0, 0, 0, -59, -59, 0, -59, 0, -59, -59, -59, 0, 0, 0, 0, 0, 0, -59, 0, -59, -59, -59, 0, 0, 0, 0,
        // State 208
        -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, -61, -61, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, -61, 0, 0, 0, -61, -61, 0, -61, 0, -61, -61, -61, 0, 0, 0, 0, 0, 0, -61, 0, -61, -61, -61, 0, 0, 0, 0,
        // State 209
        -127, 0, 0, 0, 0, -127, 0, 0, 0, 0, -127, 0, 0, 0, 0, -127, -127, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, -127, 0, 0, 0, -127, -127, 0, -127, 0, -127, -127, -127, 0, 0, 0, 0, 0, 0, -127, 0, -127, -127, -127, 0, 0, 0, 0,
        // State 210
        -128, 0, 0, 0, 0, -128, 0, 0, 0, 0, -128, 0, 0, 0, 0, -128, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, -128, 0, 0, 0, -128, -128, 0, -128, 0, -128, -128, -128, 0, 0, 0, 0, 0, 0, -128, 0, -128, -128, -128, 0, 0, 0, 0,
        // State 211
        -125, 0, 0, 0, 0, -125, 0, 0, 0, 0, -125, 0, 0, 0, 0, -125, -125, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, -125, 0, 0, 0, -125, -125, 0, -125, 0, -125, -125, -125, 0, 0, 0, 0, 0, 0, -125, 0, -125, -125, -125, 0, 0, 0, 0,
        // State 212
        -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, -126, -126, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, -126, 0, 0, 0, -126, -126, 0, -126, 0, -126, -126, -126, 0, 0, 0, 0, 0, 0, -126, 0, -126, -126, -126, 0, 0, 0, 0,
        // State 213
        -142, 0, 0, 0, 0, -142, 0, 0, 0, 0, -142, 0, 0, 0, 0, -142, -142, -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, -142, 0, 0, 0, -142, -142, 0, -142, 0, -142, -142, -142, 0, 0, 0, 0, 0, 0, -142, 0, -142, -142, -142, 0, 0, 0, 0,
        // State 214
        -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, -141, -141, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, -141, 0, 0, 0, -141, -141, 0, -141, 0, -141, -141, -141, 0, 0, 0, 0, 0, 0, -141, 0, -141, -141, -141, 0, 0, 0, 0,
        // State 215
        -195, 0, 0, 0, 0, -195, 0, 0, 0, 0, -195, 0, 0, 0, 0, -195, -195, -195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -195, 0, 0, 0, -195, 0, 0, 0, -195, -195, 0, -195, 0, -195, -195, -195, 0, 0, 0, 0, 0, 0, -195, 0, -195, -195, -195, 0, 0, 0, 0,
        // State 216
        -197, 0, 0, 0, 0, -197, 0, 0, 0, 0, -197, 0, 0, 0, 0, -197, -197, -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, 0, 0, 0, -197, 0, 0, 0, -197, -197, 0, -197, 0, -197, -197, -197, 0, 0, 0, 0, 0, 0, -197, 0, -197, -197, -197, 0, 0, 0, 0,
        // State 217
        -201, 0, 0, 0, 0, -201, 0, 0, 0, 0, -201, 0, 0, 0, 0, -201, -201, -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, 0, 0, -201, 0, 0, 0, -201, -201, 0, -201, 0, -201, -201, -201, 0, 0, 0, 0, 0, 0, -201, 0, -201, -201, -201, 0, 0, 0, 0,
        // State 218
        -200, 0, 0, 0, 0, -200, 0, 0, 0, 0, -200, 0, 0, 0, 0, -200, -200, -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, 0, 0, 0, -200, 0, 0, 0, -200, -200, 0, -200, 0, -200, -200, -200, 0, 0, 0, 0, 0, 0, -200, 0, -200, -200, -200, 0, 0, 0, 0,
        // State 219
        -199, 0, 0, 0, 0, -199, 0, 0, 0, 0, -199, 0, 0, 0, 0, -199, -199, -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, 0, 0, -199, 0, 0, 0, -199, -199, 0, -199, 0, -199, -199, -199, 0, 0, 0, 0, 0, 0, -199, 0, -199, -199, -199, 0, 0, 0, 0,
        // State 220
        0, -257, -257, -257, -257, 0, -257, -257, -257, -257, -257, 0, 0, 0, -257, 0, 0, 0, 0, -257, -257, -257, 0, -257, -257, -257, 0, 0, 0, 0, -257, -257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, -257, -257, -257,
        // State 221
        0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 222
        0, 0, 0, 0, 0, 0, 263, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 223
        0, 0, 0, 0, 0, 0, -143, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, -143,
        // State 224
        0, 0, 0, 0, 0, 0, -122, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 225
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 226
        0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 227
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0,
        // State 228
        0, 0, 0, 0, 0, 0, -171, 0, 0, -171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 229
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
        // State 230
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 231
        0, -65, -65, -65, -65, -65, -65, -65, -65, -65, -65, 0, -65, 0, -65, 0, 0, 0, 0, -65, -65, -65, 0, -65, -65, -65, 0, 0, 0, -65, -65, -65, 0, 0, -65, -65, -65, 0, -65, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, -65, -65, -65, -65,
        // State 232
        0, -62, -62, -62, -62, -62, -62, -62, -62, -62, -62, 0, -62, 0, -62, 0, 0, 0, 0, -62, -62, -62, 0, -62, -62, -62, 0, 0, 0, -62, -62, -62, 0, 0, -62, -62, -62, 0, -62, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, -62, -62, -62, -62,
        // State 233
        -26, 0, 0, 0, 0, -26, 0, 0, 0, 0, -26, 0, 0, 0, 0, -26, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, -26, 0, 0, 0, -26, -26, 0, -26, -26, -26, -26, -26, 0, 0, -26, 0, 0, 0, -26, 0, -26, -26, -26, 0, 0, 0, -26,
        // State 234
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 235
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 236
        0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 237
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 238
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 239
        0, 0, 0, 0, 0, 0, -110, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 240
        0, 0, 0, 0, 0, -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 241
        0, 0, 0, 0, 0, 0, 0, 0, 0, 273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106,
        // State 242
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31,
        // State 243
        0, -40, -40, -40, -40, 0, -40, -40, -40, -40, -40, 0, -40, 0, -40, 0, 0, 0, 0, -40, -40, -40, 0, -40, -40, -40, 0, 0, 0, -40, -40, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, -40, -40, -40,
        // State 244
        0, -148, -148, -148, -148, 0, -148, -148, -148, -148, -148, 0, -148, 0, -148, 0, 0, 0, 0, -148, -148, -148, 0, -148, -148, -148, 0, 0, 0, -148, -148, -148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, -148, -148, -148,
        // State 245
        0, -150, -150, -150, -150, 0, -150, -150, -150, -150, -150, 0, -150, 0, -150, 0, 0, 0, 0, -150, -150, -150, 0, -150, -150, -150, 0, 0, 0, -150, -150, -150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, -150, -150, -150,
        // State 246
        0, -149, -149, -149, -149, 0, -149, -149, -149, -149, -149, 0, -149, 0, -149, 0, 0, 0, 0, -149, -149, -149, 0, -149, -149, -149, 0, 0, 0, -149, -149, -149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, -149, -149, -149,
        // State 247
        0, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 248
        0, 0, 0, 0, 0, 0, -92, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 249
        0, 0, 0, 0, 0, 0, 277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 250
        0, 0, 0, 0, 0, 0, -112, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 251
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 252
        0, -228, 0, -228, -228, 0, -228, 0, -228, -228, -228, 0, 0, 0, 0, 0, 0, 0, 0, -228, -228, -228, 0, -228, -228, -228, 0, 0, 0, 0, -228, -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, -228, -228, -228,
        // State 253
        0, -230, 0, -230, -230, 0, -230, 0, 0, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, -230, -230, 0, -230, -230, -230, 0, 0, 0, 0, -230, -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, -230, -230, -230,
        // State 254
        0, -232, 0, 0, -232, 0, -232, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, -232, -232, 0, -232, -232, -232, 0, 0, 0, 0, -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, -232, -232, -232,
        // State 255
        0, -234, 0, 0, -234, 0, -234, 0, 0, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, -234, -234, 0, -234, -234, -234, 0, 0, 0, 0, -234, -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, -234, -234, -234,
        // State 256
        0, -236, 0, 0, -236, 0, -236, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, -236, -236, 0, -236, -236, -236, 0, 0, 0, 0, -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, -236, -236,
        // State 257
        0, -238, 0, 0, -238, 0, -238, 0, 0, -238, 0, 0, 0, 0, 0, 0, 0, 0, 0, -238, 0, 0, 0, -238, 0, 0, 0, 0, 0, 0, -238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -238, 0, -238, -238,
        // State 258
        0, 0, 0, 0, -240, 0, -240, 0, 0, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, 0, -240, -240,
        // State 259
        0, 0, 0, 0, 0, 0, -242, 0, 0, -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, 0, -242, -242,
        // State 260
        0, -244, -244, -244, -244, 0, -244, -244, -244, -244, -244, 0, 0, 0, -244, 0, 0, 0, 0, -244, -244, -244, 0, -244, -244, -244, 0, 0, 0, 0, -244, -244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -244, -244, -244, -244,
        // State 261
        0, -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, 0, -48, 0, -48, 0, 0, 0, 0, -48, -48, -48, 0, -48, -48, -48, 0, 0, 0, -48, -48, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, -48, -48, -48,
        // State 262
        0, -45, -45, -45, -45, -45, -45, -45, -45, -45, -45, 0, -45, 0, -45, 0, 0, 0, 0, -45, -45, -45, 0, -45, -45, -45, 0, 0, 0, -45, -45, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, -45, -45, -45,
        // State 263
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 264
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 265
        0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0, 0, -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, 0, 0,
        // State 266
        0, -64, -64, -64, -64, -64, -64, -64, -64, -64, -64, 0, -64, 0, -64, 0, 0, 0, 0, -64, -64, -64, 0, -64, -64, -64, 0, 0, 0, -64, -64, -64, 0, 0, -64, -64, -64, 0, -64, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, -64, -64, -64, -64,
        // State 267
        -27, 0, 0, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, 0, 0, -27, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, -27, 0, 0, 0, -27, -27, 0, -27, -27, -27, -27, -27, 0, 0, -27, 0, 0, 0, -27, 0, -27, -27, -27, 0, 0, 0, -27,
        // State 268
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 269
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 270
        0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 271
        0, 0, 0, 0, 0, -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 272
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32,
        // State 273
        0, 0, 0, 0, 0, 0, -94, 0, 0, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 274
        0, -90, -90, -90, -90, -90, -90, -90, -90, -90, -90, 0, -90, 0, -90, 0, 0, 0, 0, -90, -90, -90, 0, -90, -90, -90, 0, 0, 0, -90, -90, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -90, -90, -90,
        // State 275
        -11, 0, 0, 0, 0, -11, -11, 0, 0, 0, -11, 0, 0, 0, 0, -11, -11, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, 0, 0, -11, 0, 0, 0, -11, -11, 0, -11, 0, -11, -11, -11, 0, 0, -11, 0, 0, 0, -11, 0, -11, -11, -11, 0, 0, 0, 0,
        // State 276
        0, -49, -49, -49, -49, -49, -49, -49, -49, -49, -49, 0, -49, 0, -49, 0, 0, 0, 0, -49, -49, -49, 0, -49, -49, -49, 0, 0, 0, -49, -49, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, -49, -49, -49,
        // State 277
        0, -175, -175, -175, -175, 0, -175, -175, -175, -175, -175, 0, 0, 0, -175, 0, 0, 0, 0, -175, -175, -175, 0, -175, -175, -175, 0, 0, 0, -175, -175, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, -175, -175, -175,
        // State 278
        0, 0, 0, 0, 0, 0, -120, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 279
        0, -174, -174, -174, -174, -174, -174, -174, -174, -174, -174, 0, -174, 0, -174, 0, 0, 0, 0, -174, -174, -174, 0, -174, -174, -174, 0, 0, 0, -174, -174, -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -174, -174, -174, -174,
        // State 280
        0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 281
        0, 0, 0, 0, 0, 0, -55, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, -55, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, -55,
        // State 282
        0, 0, 0, 0, 0, 0, -54, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, -54, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, -54,
        // State 283
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 284
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 285
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
        // State 286
        -12, 0, 0, 0, 0, -12, -12, 0, 0, 0, -12, 0, 0, 0, 0, -12, -12, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, -12, 0, 0, 0, -12, -12, 0, -12, 0, -12, -12, -12, 0, 0, -12, 0, 0, 0, -12, 0, -12, -12, -12, 0, 0, 0, 0,
        // State 287
        0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 288
        0, -136, -136, -136, -136, -136, -136, -136, -136, -136, -136, 0, -136, 0, -136, 0, 0, 0, 0, -136, -136, -136, 0, -136, -136, -136, 0, 0, 0, -136, -136, -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, -136, -136, -136,
        // State 289
        0, -137, -137, -137, -137, -137, -137, -137, -137, -137, -137, 0, -137, 0, -137, 0, 0, 0, 0, -137, -137, -137, 0, -137, -137, -137, 0, 0, 0, -137, -137, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, -137, -137, -137,
        // State 290
        0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 291
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 292
        0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 293
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 64 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -202,
        // State 1
        -203,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        -185,
        // State 88
        -264,
        // State 89
        0,
        // State 90
        -186,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        -181,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        -177,
        // State 102
        -223,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        -180,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        -182,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        -154,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        -221,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        -63,
        // State 189
        0,
        // State 190
        0,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        -179,
        // State 195
        -178,
        // State 196
        0,
        // State 197
        -222,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        -129,
        // State 204
        0,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        0,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        0,
        // State 216
        0,
        // State 217
        0,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        0,
        // State 222
        0,
        // State 223
        0,
        // State 224
        0,
        // State 225
        0,
        // State 226
        0,
        // State 227
        0,
        // State 228
        0,
        // State 229
        0,
        // State 230
        0,
        // State 231
        -65,
        // State 232
        -62,
        // State 233
        0,
        // State 234
        0,
        // State 235
        0,
        // State 236
        0,
        // State 237
        0,
        // State 238
        0,
        // State 239
        0,
        // State 240
        0,
        // State 241
        0,
        // State 242
        0,
        // State 243
        0,
        // State 244
        0,
        // State 245
        0,
        // State 246
        0,
        // State 247
        0,
        // State 248
        0,
        // State 249
        0,
        // State 250
        0,
        // State 251
        0,
        // State 252
        0,
        // State 253
        0,
        // State 254
        0,
        // State 255
        0,
        // State 256
        0,
        // State 257
        0,
        // State 258
        0,
        // State 259
        0,
        // State 260
        0,
        // State 261
        0,
        // State 262
        0,
        // State 263
        0,
        // State 264
        0,
        // State 265
        0,
        // State 266
        -64,
        // State 267
        0,
        // State 268
        0,
        // State 269
        0,
        // State 270
        0,
        // State 271
        0,
        // State 272
        0,
        // State 273
        0,
        // State 274
        0,
        // State 275
        0,
        // State 276
        0,
        // State 277
        0,
        // State 278
        0,
        // State 279
        0,
        // State 280
        0,
        // State 281
        0,
        // State 282
        0,
        // State 283
        0,
        // State 284
        0,
        // State 285
        0,
        // State 286
        0,
        // State 287
        0,
        // State 288
        0,
        // State 289
        0,
        // State 290
        0,
        // State 291
        0,
        // State 292
        0,
        // State 293
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            7 => 75,
            10 => 54,
            13 => 27,
            16 => 52,
            19 => 56,
            22 => 55,
            25 => 142,
            26 => match state {
                62 => 253,
                _ => 143,
            },
            27 => 61,
            28 => 144,
            29 => 145,
            30 => match state {
                20 => 130,
                _ => 103,
            },
            31 => match state {
                64 => 255,
                _ => 146,
            },
            32 => 62,
            33 => match state {
                65 => 256,
                _ => 147,
            },
            34 => 63,
            35 => match state {
                63 => 254,
                _ => 148,
            },
            36 => 64,
            37 => match state {
                22 => 137,
                31 => 194,
                83 => 288,
                _ => 77,
            },
            61 => 149,
            62 => match state {
                82 => 287,
                85 => 292,
                _ => 247,
            },
            63 => 189,
            64 => 134,
            65 => 201,
            66 => match state {
                74 => 270,
                78 => 280,
                _ => 198,
            },
            67 => 249,
            68 => 113,
            69 => 127,
            70 => 125,
            71 => 221,
            72 => 131,
            73 => match state {
                66 => 257,
                _ => 150,
            },
            74 => 65,
            75 => 97,
            76 => 151,
            77 => 279,
            79 => match state {
                67 => 258,
                _ => 152,
            },
            80 => 66,
            81 => match state {
                47 => 70,
                24 => 153,
                28 | 52 => 183,
                46 => 222,
                48 => 223,
                59 => 250,
                60 => 251,
                73 => 268,
                75 => 273,
                76 => 278,
                80 => 284,
                86 => 293,
                _ => 248,
            },
            83 => 243,
            84 => 244,
            85 => match state {
                52 => 229,
                _ => 184,
            },
            87 => 112,
            88 => match state {
                13 => 111,
                _ => 22,
            },
            89 => 191,
            90 => 192,
            91 => match state {
                29 => 190,
                54 => 236,
                _ => 114,
            },
            93 => 14,
            94 => 10,
            95 => match state {
                2 => 6,
                3 => 8,
                5 => 11,
                7 => 13,
                9 => 98,
                10 => 99,
                15 | 29 | 54 => 115,
                19 | 35 | 56 => 128,
                21 | 27 => 135,
                24 | 45..=48 | 58..=69 | 73 | 75..=76 | 80 | 82 | 85..=86 => 154,
                28 | 52 => 185,
                53 => 234,
                _ => 104,
            },
            96 => match state {
                27 => 181,
                _ => 136,
            },
            98 => match state {
                83 => 289,
                _ => 155,
            },
            99 => 156,
            100 => match state {
                1 => 90,
                _ => 87,
            },
            102 => 1,
            103 => 157,
            104 => 235,
            105 => match state {
                17 => 123,
                32 => 196,
                57 => 245,
                81 => 285,
                _ => 117,
            },
            106 => match state {
                68 => 259,
                _ => 158,
            },
            107 => 67,
            108 => 159,
            109 => 68,
            110 => match state {
                61 => 252,
                _ => 160,
            },
            111 => 69,
            112 => 88,
            113 => match state {
                84 => 290,
                _ => 227,
            },
            125 => match state {
                52 => 230,
                _ => 186,
            },
            126 => 187,
            127 => 101,
            128 => match state {
                35 => 202,
                56 => 241,
                _ => 129,
            },
            130 => match state {
                57 => 246,
                _ => 91,
            },
            131 => 36,
            132 => 37,
            133 => 38,
            134 => 39,
            135 => 40,
            136 => 41,
            137 => 42,
            138 => 43,
            139 => 44,
            140 => 105,
            141 => match state {
                12 => 106,
                18 => 126,
                20 => 132,
                23 => 139,
                34 => 200,
                49 => 224,
                51 => 228,
                55 => 239,
                72 => 265,
                79 => 283,
                _ => 199,
            },
            143 => 107,
            144 => match state {
                16..=17 | 32 | 57 | 81 => 118,
                _ => 161,
            },
            145 => match state {
                45 => 220,
                69 => 260,
                _ => 162,
            },
            146 => 45,
            147 => match state {
                26 => 180,
                71 => 263,
                _ => 176,
            },
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""!""###,
            r###""!=""###,
            r###""%""###,
            r###""&""###,
            r###""&&""###,
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###"".""###,
            r###""..""###,
            r###""/""###,
            r###""2""###,
            r###""3""###,
            r###""4""###,
            r###"":""###,
            r###"";""###,
            r###""<""###,
            r###""<=""###,
            r###""=""###,
            r###""==""###,
            r###"">""###,
            r###"">=""###,
            r###""Fn""###,
            r###""Matrix""###,
            r###""Vector""###,
            r###""[""###,
            r###""]""###,
            r###""^""###,
            r###""binding""###,
            r###""bool""###,
            r###""const""###,
            r###""else""###,
            r###""extern""###,
            r###""float""###,
            r###""fn""###,
            r###""function modifier""###,
            r###""global""###,
            r###""identifier""###,
            r###""if""###,
            r###""in""###,
            r###""int""###,
            r###""let""###,
            r###""m2""###,
            r###""m3""###,
            r###""m4""###,
            r###""out""###,
            r###""position""###,
            r###""return""###,
            r###""scalar type""###,
            r###""set""###,
            r###""struct""###,
            r###""uint""###,
            r###""uniform""###,
            r###""v2""###,
            r###""v3""###,
            r###""v4""###,
            r###""{""###,
            r###""|""###,
            r###""||""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<>
    where 
    {
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<> __state_machine::ParserDefinition for __StateMachine<>
    where 
    {
        type Location = Loc;
        type Error = LexerError;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ::std::vec::Vec<Item>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 64 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Bang if true => Some(0),
            Token::Inequality if true => Some(1),
            Token::Percent if true => Some(2),
            Token::BitWiseAnd if true => Some(3),
            Token::LogicalAnd if true => Some(4),
            Token::OpenParentheses if true => Some(5),
            Token::CloseParentheses if true => Some(6),
            Token::Star if true => Some(7),
            Token::Plus if true => Some(8),
            Token::Comma if true => Some(9),
            Token::Minus if true => Some(10),
            Token::Arrow if true => Some(11),
            Token::Dot if true => Some(12),
            Token::Dot2 if true => Some(13),
            Token::Slash if true => Some(14),
            Token::Two if true => Some(15),
            Token::Three if true => Some(16),
            Token::Four if true => Some(17),
            Token::Colon if true => Some(18),
            Token::SemiColon if true => Some(19),
            Token::Less if true => Some(20),
            Token::LessEqual if true => Some(21),
            Token::Equal if true => Some(22),
            Token::Equality if true => Some(23),
            Token::Greater if true => Some(24),
            Token::GreaterEqual if true => Some(25),
            Token::FnTrait if true => Some(26),
            Token::Matrix if true => Some(27),
            Token::Vector if true => Some(28),
            Token::OpenSquareBrackets if true => Some(29),
            Token::CloseSquareBrackets if true => Some(30),
            Token::BitWiseXor if true => Some(31),
            Token::Binding if true => Some(32),
            Token::Bool(_) if true => Some(33),
            Token::Const if true => Some(34),
            Token::Else if true => Some(35),
            Token::Extern if true => Some(36),
            Token::Float(_) if true => Some(37),
            Token::Fn if true => Some(38),
            Token::EntryPointStage(_) if true => Some(39),
            Token::Global if true => Some(40),
            Token::Identifier(_) if true => Some(41),
            Token::If if true => Some(42),
            Token::In if true => Some(43),
            Token::Int(_) if true => Some(44),
            Token::Let if true => Some(45),
            Token::M2 if true => Some(46),
            Token::M3 if true => Some(47),
            Token::M4 if true => Some(48),
            Token::Out if true => Some(49),
            Token::Position if true => Some(50),
            Token::Return if true => Some(51),
            Token::ScalarType(_) if true => Some(52),
            Token::Set if true => Some(53),
            Token::Struct if true => Some(54),
            Token::Uint(_) if true => Some(55),
            Token::Uniform if true => Some(56),
            Token::V2 if true => Some(57),
            Token::V3 if true => Some(58),
            Token::V4 if true => Some(59),
            Token::OpenCurlyBraces if true => Some(60),
            Token::BitWiseOr if true => Some(61),
            Token::LogicalOr if true => Some(62),
            Token::CloseCurlyBraces if true => Some(63),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 34 | 35 | 36 | 38 | 40 | 42 | 43 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 53 | 54 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 => __Symbol::Variant0(__token),
            33 => match __token {
                Token::Bool(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            37 => match __token {
                Token::Float(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            39 => match __token {
                Token::EntryPointStage(__tok0) if true => __Symbol::Variant3(__tok0),
                _ => unreachable!(),
            },
            41 => match __token {
                Token::Identifier(__tok0) if true => __Symbol::Variant4(__tok0),
                _ => unreachable!(),
            },
            44 => match __token {
                Token::Int(__tok0) if true => __Symbol::Variant5(__tok0),
                _ => unreachable!(),
            },
            52 => match __token {
                Token::ScalarType(__tok0) if true => __Symbol::Variant6(__tok0),
                _ => unreachable!(),
            },
            55 => match __token {
                Token::Uint(__tok0) if true => __Symbol::Variant7(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub struct ProgramParser {
        _priv: (),
    }

    impl ProgramParser {
        pub fn new() -> ProgramParser {
            ProgramParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            __tokens0: __TOKENS,
        ) -> Result<::std::vec::Vec<Item>, __lalrpop_util::ParseError<Loc, Token, LexerError>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        __action: i16,
        __lookahead_start: Option<&Loc>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<::std::vec::Vec<Item>,__lalrpop_util::ParseError<Loc, Token, LexerError>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                __reduce28(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            29 => {
                __reduce29(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            30 => {
                __reduce30(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            31 => {
                __reduce31(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                __reduce98(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            99 => {
                __reduce99(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                __reduce101(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            102 => {
                __reduce102(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            103 => {
                __reduce103(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            142 => {
                __reduce142(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            143 => {
                __reduce143(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            144 => {
                __reduce144(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            145 => {
                __reduce145(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            146 => {
                __reduce146(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            147 => {
                __reduce147(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            148 => {
                __reduce148(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            149 => {
                __reduce149(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            150 => {
                __reduce150(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            151 => {
                __reduce151(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            152 => {
                __reduce152(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            153 => {
                __reduce153(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            154 => {
                __reduce154(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            155 => {
                __reduce155(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            156 => {
                __reduce156(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            157 => {
                __reduce157(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            158 => {
                __reduce158(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            159 => {
                __reduce159(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            160 => {
                __reduce160(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            161 => {
                __reduce161(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            162 => {
                __reduce162(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            163 => {
                __reduce163(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            164 => {
                __reduce164(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            165 => {
                __reduce165(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            166 => {
                __reduce166(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            167 => {
                __reduce167(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            168 => {
                __reduce168(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            169 => {
                __reduce169(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            170 => {
                __reduce170(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            171 => {
                __reduce171(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            172 => {
                __reduce172(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            173 => {
                __reduce173(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            174 => {
                __reduce174(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            175 => {
                __reduce175(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            176 => {
                __reduce176(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            177 => {
                __reduce177(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            178 => {
                __reduce178(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            179 => {
                __reduce179(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            180 => {
                __reduce180(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            181 => {
                __reduce181(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            182 => {
                __reduce182(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            183 => {
                __reduce183(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            184 => {
                __reduce184(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            185 => {
                __reduce185(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            186 => {
                __reduce186(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            187 => {
                __reduce187(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            188 => {
                __reduce188(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            189 => {
                __reduce189(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            190 => {
                __reduce190(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            191 => {
                __reduce191(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            192 => {
                __reduce192(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            193 => {
                __reduce193(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            194 => {
                __reduce194(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            195 => {
                __reduce195(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            196 => {
                __reduce196(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            197 => {
                __reduce197(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            198 => {
                __reduce198(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            199 => {
                __reduce199(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            200 => {
                __reduce200(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            201 => {
                __reduce201(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            202 => {
                __reduce202(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            203 => {
                __reduce203(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            204 => {
                __reduce204(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            205 => {
                __reduce205(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            206 => {
                __reduce206(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            207 => {
                __reduce207(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            208 => {
                __reduce208(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            209 => {
                __reduce209(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            210 => {
                __reduce210(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            211 => {
                __reduce211(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            212 => {
                __reduce212(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            213 => {
                __reduce213(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            214 => {
                __reduce214(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            215 => {
                __reduce215(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            216 => {
                __reduce216(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            217 => {
                __reduce217(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            218 => {
                __reduce218(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            219 => {
                __reduce219(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            220 => {
                __reduce220(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            221 => {
                __reduce221(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            222 => {
                __reduce222(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            223 => {
                __reduce223(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            224 => {
                __reduce224(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            225 => {
                __reduce225(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            226 => {
                __reduce226(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            227 => {
                __reduce227(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            228 => {
                __reduce228(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            229 => {
                __reduce229(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            230 => {
                __reduce230(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            231 => {
                __reduce231(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            232 => {
                __reduce232(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            233 => {
                __reduce233(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            234 => {
                __reduce234(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            235 => {
                __reduce235(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            236 => {
                __reduce236(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            237 => {
                __reduce237(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            238 => {
                __reduce238(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            239 => {
                __reduce239(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            240 => {
                __reduce240(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            241 => {
                __reduce241(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            242 => {
                __reduce242(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            243 => {
                __reduce243(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            244 => {
                __reduce244(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            245 => {
                __reduce245(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            246 => {
                __reduce246(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            247 => {
                __reduce247(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            248 => {
                __reduce248(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            249 => {
                __reduce249(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            250 => {
                __reduce250(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            251 => {
                __reduce251(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            252 => {
                __reduce252(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            253 => {
                __reduce253(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            254 => {
                __reduce254(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            255 => {
                __reduce255(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            256 => {
                __reduce256(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            257 => {
                __reduce257(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            258 => {
                __reduce258(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            259 => {
                __reduce259(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            260 => {
                __reduce260(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            261 => {
                __reduce261(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            262 => {
                __reduce262(__lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            263 => {
                // __Program = Program => ActionFn(0);
                let __sym0 = __pop_Variant52(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(__sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, (), Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, (ConstructorType, VectorSize), Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, BinaryOp, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Block, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Box<Expr>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Constant, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ElseIf, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, EntryPointStage, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Expr, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ExprKind, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Field, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, FieldKind, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, FnSig, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Function, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, GenericBound, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, GenericBoundKind, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, GenericParam, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant47<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Generics, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant47(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant48<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, GlobalBinding, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant48(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant49<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Ident, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant49(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, IdentTypePair, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant51<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Item, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant51(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant53<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Literal, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant53(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Loc, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant54<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Local, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant54(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ScalarType, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant56<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Spanned<BinaryOp>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant56(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant57<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Spanned<UnaryOp>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant57(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Stmt, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant58<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, StmtKind, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant58(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, StructField, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant59<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, StructKind, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant59(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Symbol, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Token, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Ty, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, TypeKind, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant61<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, UnaryOp, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant61(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Vec<Expr>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Vec<GenericParam>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Vec<IdentTypePair>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Vec<StructField>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, Vec<Ty>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant62<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, VectorSize, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant62(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, bool, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, f64, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, i64, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant55<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, u32, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant55(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, u64, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<Box<Expr>>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<Expr>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<GenericBound>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<GenericParam>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant50<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<IdentTypePair>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant50(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<Stmt>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant60<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<StructField>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant60(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::option::Option<Ty>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<Expr>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<GenericParam>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<IdentTypePair>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant52<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<Item>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant52(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<Stmt>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<StructField>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>
    ) -> (Loc, ::std::vec::Vec<Ty>, Loc)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (":" <GenericBound>) = ":", GenericBound => ActionFn(158);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action158::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (":" <GenericBound>)? = ":", GenericBound => ActionFn(240);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action240::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (":" <GenericBound>)? =  => ActionFn(157);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action157::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (":" <Ty>) = ":", Ty => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (":" <Ty>)? = ":", Ty => ActionFn(243);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action243::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce5<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (":" <Ty>)? =  => ActionFn(146);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action146::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // () =  => ActionFn(159);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action159::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Expr> ",") = Expr, "," => ActionFn(219);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action219::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce8<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")* =  => ActionFn(217);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action217::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce9<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")* = (<Expr> ",")+ => ActionFn(218);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action218::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")+ = Expr, "," => ActionFn(248);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action248::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce11<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Expr> ",")+ = (<Expr> ",")+, Expr, "," => ActionFn(249);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action249::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce12<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<GenericParam> ",") = GenericParam, "," => ActionFn(228);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action228::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce13<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<GenericParam> ",")* =  => ActionFn(226);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action226::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce14<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<GenericParam> ",")* = (<GenericParam> ",")+ => ActionFn(227);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action227::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce15<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<GenericParam> ",")+ = GenericParam, "," => ActionFn(252);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action252::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce16<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<GenericParam> ",")+ = (<GenericParam> ",")+, GenericParam, "," => ActionFn(253);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action253::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce17<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<IdentTypePair> ",") = IdentTypePair, "," => ActionFn(179);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action179::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce18<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<IdentTypePair> ",")* =  => ActionFn(177);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action177::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce19<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<IdentTypePair> ",")* = (<IdentTypePair> ",")+ => ActionFn(178);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action178::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 12)
    }
    pub(crate) fn __reduce20<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<IdentTypePair> ",")+ = IdentTypePair, "," => ActionFn(256);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action256::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce21<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<IdentTypePair> ",")+ = (<IdentTypePair> ",")+, IdentTypePair, "," => ActionFn(257);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action257::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce22<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Stmt> ";") = Stmt, ";" => ActionFn(152);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action152::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce23<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Stmt> ";")* =  => ActionFn(150);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action150::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 15)
    }
    pub(crate) fn __reduce24<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Stmt> ";")* = (<Stmt> ";")+ => ActionFn(151);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action151::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce25<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Stmt> ";")+ = Stmt, ";" => ActionFn(260);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action260::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce26<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Stmt> ";")+ = (<Stmt> ";")+, Stmt, ";" => ActionFn(261);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action261::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce27<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<StructField> ",") = StructField, "," => ActionFn(233);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action233::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce28<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")* =  => ActionFn(231);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action231::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 18)
    }
    pub(crate) fn __reduce29<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")* = (<StructField> ",")+ => ActionFn(232);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action232::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce30<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")+ = StructField, "," => ActionFn(264);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action264::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce31<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<StructField> ",")+ = (<StructField> ",")+, StructField, "," => ActionFn(265);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action265::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce32<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Ty> ",") = Ty, "," => ActionFn(186);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action186::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce33<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Ty> ",")* =  => ActionFn(184);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action184::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce34<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Ty> ",")* = (<Ty> ",")+ => ActionFn(185);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action185::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce35<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Ty> ",")+ = Ty, "," => ActionFn(268);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action268::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce36<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Ty> ",")+ = (<Ty> ",")+, Ty, "," => ActionFn(269);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action269::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce37<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(170);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action170::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce38<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(169);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action169::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 24)
    }
    pub(crate) fn __reduce39<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Access = Access, ".", Field => ActionFn(366);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant40(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action366::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce40<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Access = Call => ActionFn(90);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action90::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce41<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Additive = Tier<AdditiveOp, Multiplicative> => ActionFn(76);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce42<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AdditiveOp = "+" => ActionFn(77);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce43<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AdditiveOp = "-" => ActionFn(78);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce44<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Atom = "(", Expr, ")" => ActionFn(96);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action96::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 28)
    }
    pub(crate) fn __reduce45<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Atom = AtomKind => ActionFn(320);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action320::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomKind = Literal => ActionFn(98);
        let __sym0 = __pop_Variant53(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action98::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomKind = "(", CommaAtLeastTwo<Expr>, ")" => ActionFn(99);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant31(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action99::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce48<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomKind = Constructor, "(", CommaAtLeastOne<Expr>, ")" => ActionFn(100);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant37(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action100::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (4, 29)
    }
    pub(crate) fn __reduce49<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomKind = Ident => ActionFn(101);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce50<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomKind = If => ActionFn(102);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce51<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomType = Ident => ActionFn(27);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce52<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomType = "scalar type" => ActionFn(28);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce53<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomType = "Vector", "<", VectorSize, ",", "scalar type", ">" => ActionFn(29);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action29::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 30)
    }
    pub(crate) fn __reduce54<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AtomType = "Matrix", "<", VectorSize, ",", VectorSize, ">" => ActionFn(30);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant62(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant62(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action30::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (6, 30)
    }
    pub(crate) fn __reduce55<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // BitWiseAnd = Tier<BitWiseAndOP, Additive> => ActionFn(74);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce56<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // BitWiseAndOP = "&" => ActionFn(75);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action75::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce57<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // BitWiseOr = Tier<BitWiseOrOP, BitWiseXor> => ActionFn(70);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action70::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce58<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // BitWiseOrOP = "|" => ActionFn(71);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce59<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // BitWiseXor = Tier<BitWiseXorOP, BitWiseAnd> => ActionFn(72);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action72::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce60<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // BitWiseXorOP = "^" => ActionFn(73);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce61<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Block = "{", FinalStmt, "}" => ActionFn(397);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action397::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce62<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Block = "{", "}" => ActionFn(398);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action398::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce63<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Block = "{", (<Stmt> ";")+, FinalStmt, "}" => ActionFn(399);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action399::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (4, 37)
    }
    pub(crate) fn __reduce64<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Block = "{", (<Stmt> ";")+, "}" => ActionFn(400);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action400::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce65<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Access> = Access => ActionFn(120);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce66<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Additive> = Additive => ActionFn(207);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action207::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce67<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<BitWiseAnd> = BitWiseAnd => ActionFn(204);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action204::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce68<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<BitWiseOr> = BitWiseOr => ActionFn(198);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action198::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce69<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<BitWiseXor> = BitWiseXor => ActionFn(201);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action201::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce70<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Call> = Call => ActionFn(119);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce71<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Comparison> = Comparison => ActionFn(195);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action195::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce72<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Equality> = Equality => ActionFn(192);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action192::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce73<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Expr> = Expr => ActionFn(144);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action144::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce74<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Expr>? = Expr => ActionFn(374);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action374::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce75<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Expr>? =  => ActionFn(143);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action143::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 47)
    }
    pub(crate) fn __reduce76<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Index> = Index => ActionFn(121);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce77<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<LogicalAnd> = LogicalAnd => ActionFn(189);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action189::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce78<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Multiplicative> = Multiplicative => ActionFn(210);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action210::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce79<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<AdditiveOp, Multiplicative>> = Tier<AdditiveOp, Multiplicative> => ActionFn(212);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action212::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce80<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<BitWiseAndOP, Additive>> = Tier<BitWiseAndOP, Additive> => ActionFn(209);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action209::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce81<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<BitWiseOrOP, BitWiseXor>> = Tier<BitWiseOrOP, BitWiseXor> => ActionFn(203);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action203::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce82<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<BitWiseXorOP, BitWiseAnd>> = Tier<BitWiseXorOP, BitWiseAnd> => ActionFn(206);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action206::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce83<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<ComparisonOp, BitWiseOr>> = Tier<ComparisonOp, BitWiseOr> => ActionFn(200);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action200::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce84<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<EqualityOp, Comparison>> = Tier<EqualityOp, Comparison> => ActionFn(197);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action197::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce85<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<LogicalAndOP, Equality>> = Tier<LogicalAndOP, Equality> => ActionFn(194);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action194::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce86<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<LogicalOrOP, LogicalAnd>> = Tier<LogicalOrOP, LogicalAnd> => ActionFn(191);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action191::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce87<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Tier<MultiplicativeOp, Unary>> = Tier<MultiplicativeOp, Unary> => ActionFn(214);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action214::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce88<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Box<Unary> = Unary => ActionFn(122);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce89<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Call = Call, "(", Comma<Expr>, ")" => ActionFn(371);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action371::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 61)
    }
    pub(crate) fn __reduce90<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Call = Atom => ActionFn(95);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce91<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Expr> = Expr => ActionFn(393);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action393::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce92<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Expr> =  => ActionFn(394);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action394::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 62)
    }
    pub(crate) fn __reduce93<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Expr> = (<Expr> ",")+, Expr => ActionFn(395);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action395::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (2, 62)
    }
    pub(crate) fn __reduce94<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Expr> = (<Expr> ",")+ => ActionFn(396);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action396::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce95<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<GenericParam> = GenericParam => ActionFn(401);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action401::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce96<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<GenericParam> =  => ActionFn(402);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action402::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 63)
    }
    pub(crate) fn __reduce97<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<GenericParam> = (<GenericParam> ",")+, GenericParam => ActionFn(403);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action403::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (2, 63)
    }
    pub(crate) fn __reduce98<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<GenericParam> = (<GenericParam> ",")+ => ActionFn(404);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action404::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 63)
    }
    pub(crate) fn __reduce99<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<IdentTypePair> = IdentTypePair => ActionFn(405);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action405::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce100<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<IdentTypePair> =  => ActionFn(406);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action406::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 64)
    }
    pub(crate) fn __reduce101<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<IdentTypePair> = (<IdentTypePair> ",")+, IdentTypePair => ActionFn(407);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action407::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (2, 64)
    }
    pub(crate) fn __reduce102<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<IdentTypePair> = (<IdentTypePair> ",")+ => ActionFn(408);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action408::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 64)
    }
    pub(crate) fn __reduce103<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<StructField> = StructField => ActionFn(425);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action425::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce104<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<StructField> =  => ActionFn(426);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action426::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (0, 65)
    }
    pub(crate) fn __reduce105<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<StructField> = (<StructField> ",")+, StructField => ActionFn(427);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action427::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (2, 65)
    }
    pub(crate) fn __reduce106<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<StructField> = (<StructField> ",")+ => ActionFn(428);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action428::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 65)
    }
    pub(crate) fn __reduce107<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Ty> = Ty => ActionFn(429);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action429::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce108<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Ty> =  => ActionFn(430);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action430::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 66)
    }
    pub(crate) fn __reduce109<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Ty> = (<Ty> ",")+, Ty => ActionFn(431);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action431::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 66)
    }
    pub(crate) fn __reduce110<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comma<Ty> = (<Ty> ",")+ => ActionFn(432);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action432::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 66)
    }
    pub(crate) fn __reduce111<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<Expr> = Expr => ActionFn(114);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action114::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 67)
    }
    pub(crate) fn __reduce112<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<Expr> = Expr, ",", Comma<Expr> => ActionFn(115);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant31(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action115::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 67)
    }
    pub(crate) fn __reduce113<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<GenericParam> = GenericParam => ActionFn(160);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 68)
    }
    pub(crate) fn __reduce114<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<GenericParam> = GenericParam, ",", Comma<GenericParam> => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant32(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (3, 68)
    }
    pub(crate) fn __reduce115<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<StructField> = StructField => ActionFn(164);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 69)
    }
    pub(crate) fn __reduce116<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<StructField> = StructField, ",", Comma<StructField> => ActionFn(165);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant34(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action165::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (3, 69)
    }
    pub(crate) fn __reduce117<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<Ty> = Ty => ActionFn(162);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action162::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 70)
    }
    pub(crate) fn __reduce118<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastOne<Ty> = Ty, ",", Comma<Ty> => ActionFn(163);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant35(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action163::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (3, 70)
    }
    pub(crate) fn __reduce119<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastTwo<Expr> = Expr, ",", Expr => ActionFn(116);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action116::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (3, 71)
    }
    pub(crate) fn __reduce120<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastTwo<Expr> = Expr, ",", Expr, ",", Comma<Expr> => ActionFn(117);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant31(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action117::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (5, 71)
    }
    pub(crate) fn __reduce121<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastTwo<Ty> = Ty, ",", Ty => ActionFn(153);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action153::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (3, 72)
    }
    pub(crate) fn __reduce122<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CommaAtLeastTwo<Ty> = Ty, ",", Ty, ",", Comma<Ty> => ActionFn(154);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant35(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action154::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (5, 72)
    }
    pub(crate) fn __reduce123<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Comparison = Tier<ComparisonOp, BitWiseOr> => ActionFn(65);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 73)
    }
    pub(crate) fn __reduce124<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ComparisonOp = ">" => ActionFn(66);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce125<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ComparisonOp = ">=" => ActionFn(67);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action67::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce126<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ComparisonOp = "<" => ActionFn(68);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce127<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ComparisonOp = "<=" => ActionFn(69);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action69::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 74)
    }
    pub(crate) fn __reduce128<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constant = ":", Ty, "=", Expr, ";" => ActionFn(14);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action14::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (5, 75)
    }
    pub(crate) fn __reduce129<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constructor = "v2" => ActionFn(108);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action108::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce130<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constructor = "v3" => ActionFn(109);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce131<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constructor = "v4" => ActionFn(110);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce132<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constructor = "m2" => ActionFn(111);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce133<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constructor = "m3" => ActionFn(112);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action112::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce134<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Constructor = "m4" => ActionFn(113);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 76)
    }
    pub(crate) fn __reduce135<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Else = "else", Block => ActionFn(104);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action104::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 77)
    }
    pub(crate) fn __reduce136<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Else = "else", If => ActionFn(324);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant26(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action324::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 77)
    }
    pub(crate) fn __reduce137<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Else =  => ActionFn(246);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action246::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 77)
    }
    pub(crate) fn __reduce138<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ElseIf = "else", "if", Expr, Block => ActionFn(325);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant28(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action325::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (4, 78)
    }
    pub(crate) fn __reduce139<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Equality = Tier<EqualityOp, Comparison> => ActionFn(62);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action62::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 79)
    }
    pub(crate) fn __reduce140<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // EqualityOp = "==" => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce141<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // EqualityOp = "!=" => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 80)
    }
    pub(crate) fn __reduce142<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = "return", Expr => ActionFn(377);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action377::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 81)
    }
    pub(crate) fn __reduce143<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = "return" => ActionFn(378);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action378::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce144<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = LogicalOr => ActionFn(57);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 81)
    }
    pub(crate) fn __reduce145<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr? = Expr => ActionFn(215);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action215::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 82)
    }
    pub(crate) fn __reduce146<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr? =  => ActionFn(216);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action216::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 82)
    }
    pub(crate) fn __reduce147<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Field = FieldKind => ActionFn(327);
        let __sym0 = __pop_Variant41(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action327::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 83)
    }
    pub(crate) fn __reduce148<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FieldKind = Symbol => ActionFn(92);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action92::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce149<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FieldKind = Location => ActionFn(93);
        let __sym0 = __pop_Variant55(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 84)
    }
    pub(crate) fn __reduce150<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FinalStmt = Expr => ActionFn(328);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action328::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 85)
    }
    pub(crate) fn __reduce151<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FinalStmt? = FinalStmt => ActionFn(148);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action148::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 86)
    }
    pub(crate) fn __reduce152<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FinalStmt? =  => ActionFn(149);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action149::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (0, 86)
    }
    pub(crate) fn __reduce153<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Fn = FnSig, Block => ActionFn(8);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant28(__symbols);
        let __sym0 = __pop_Variant44(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action8::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (2, 87)
    }
    pub(crate) fn __reduce154<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FnSig = "(", Comma<IdentTypePair>, ")", Return => ActionFn(411);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant33(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action411::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (4, 88)
    }
    pub(crate) fn __reduce155<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // FnSig = "(", Comma<IdentTypePair>, ")" => ActionFn(412);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant33(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action412::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (3, 88)
    }
    pub(crate) fn __reduce156<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericBound = GenericBoundKind => ActionFn(330);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action330::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 89)
    }
    pub(crate) fn __reduce157<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericBoundKind = "Fn", "(", Comma<Ty>, ")", Return => ActionFn(413);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant35(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action413::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (5, 90)
    }
    pub(crate) fn __reduce158<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericBoundKind = "Fn", "(", Comma<Ty>, ")" => ActionFn(414);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant35(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action414::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (4, 90)
    }
    pub(crate) fn __reduce159<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericParam = Ident, ":", GenericBound => ActionFn(331);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant8(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action331::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 91)
    }
    pub(crate) fn __reduce160<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericParam = Ident => ActionFn(332);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action332::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 91)
    }
    pub(crate) fn __reduce161<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericParam? = GenericParam => ActionFn(224);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action224::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (1, 92)
    }
    pub(crate) fn __reduce162<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GenericParam? =  => ActionFn(225);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action225::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (0, 92)
    }
    pub(crate) fn __reduce163<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Generics = "<", CommaAtLeastOne<GenericParam>, ">" => ActionFn(333);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant32(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action333::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (3, 93)
    }
    pub(crate) fn __reduce164<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Generics =  => ActionFn(247);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action247::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant47(__nt), __end));
        (0, 93)
    }
    pub(crate) fn __reduce165<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GlobalBinding = "position" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (1, 94)
    }
    pub(crate) fn __reduce166<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GlobalBinding = "in", "=", Location => ActionFn(37);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action37::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (3, 94)
    }
    pub(crate) fn __reduce167<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GlobalBinding = "out", "=", Location => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant55(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action38::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (3, 94)
    }
    pub(crate) fn __reduce168<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // GlobalBinding = "uniform", "{", "set", "=", Location, "binding", "=", Location, "}" => ActionFn(39);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant55(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant55(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action39::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant48(__nt), __end));
        (9, 94)
    }
    pub(crate) fn __reduce169<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Ident = Symbol => ActionFn(334);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action334::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant49(__nt), __end));
        (1, 95)
    }
    pub(crate) fn __reduce170<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IdentTypePair = Ident, ":", Ty => ActionFn(335);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action335::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 96)
    }
    pub(crate) fn __reduce171<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IdentTypePair? = IdentTypePair => ActionFn(175);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action175::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (1, 97)
    }
    pub(crate) fn __reduce172<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // IdentTypePair? =  => ActionFn(176);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action176::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant50(__nt), __end));
        (0, 97)
    }
    pub(crate) fn __reduce173<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // If = "if", Expr, Block, Else => ActionFn(375);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant28(__symbols);
        let __sym2 = __pop_Variant28(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action375::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (4, 98)
    }
    pub(crate) fn __reduce174<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Index = Index, "[", Expr, "]" => ActionFn(379);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action379::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (4, 99)
    }
    pub(crate) fn __reduce175<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Index = Access => ActionFn(88);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action88::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 99)
    }
    pub(crate) fn __reduce176<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item = "struct", Ident, Struct => ActionFn(337);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant59(__symbols);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action337::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (3, 100)
    }
    pub(crate) fn __reduce177<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item = "global", GlobalBinding, Ident, ":", Ty, ";" => ActionFn(338);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant10(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant49(__symbols);
        let __sym1 = __pop_Variant48(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action338::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (6, 100)
    }
    pub(crate) fn __reduce178<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item = "fn", "function modifier", Ident, "(", ")", Block => ActionFn(339);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant28(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant49(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action339::<>(__sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (6, 100)
    }
    pub(crate) fn __reduce179<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item = "fn", Ident, Generics, Fn => ActionFn(340);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant43(__symbols);
        let __sym2 = __pop_Variant47(__symbols);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action340::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (4, 100)
    }
    pub(crate) fn __reduce180<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item = "const", Ident, Constant => ActionFn(341);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant36(__symbols);
        let __sym1 = __pop_Variant49(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action341::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (3, 100)
    }
    pub(crate) fn __reduce181<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item = "extern", "fn", Ident, FnSig, ";" => ActionFn(342);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant44(__symbols);
        let __sym2 = __pop_Variant49(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action342::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant51(__nt), __end));
        (5, 100)
    }
    pub(crate) fn __reduce182<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item* =  => ActionFn(171);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action171::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (0, 101)
    }
    pub(crate) fn __reduce183<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item* = Item+ => ActionFn(172);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action172::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 101)
    }
    pub(crate) fn __reduce184<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item+ = Item => ActionFn(173);
        let __sym0 = __pop_Variant51(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action173::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 102)
    }
    pub(crate) fn __reduce185<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Item+ = Item+, Item => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant51(__symbols);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action174::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (2, 102)
    }
    pub(crate) fn __reduce186<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Literal = Uint => ActionFn(41);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce187<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Literal = "int" => ActionFn(42);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce188<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Literal = "float" => ActionFn(43);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action43::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce189<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Literal = "bool" => ActionFn(44);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action44::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant53(__nt), __end));
        (1, 103)
    }
    pub(crate) fn __reduce190<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Local = Ident, ":", Ty, "=", Expr => ActionFn(244);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action244::<>(__sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (5, 104)
    }
    pub(crate) fn __reduce191<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Local = Ident, "=", Expr => ActionFn(245);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action245::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant54(__nt), __end));
        (3, 104)
    }
    pub(crate) fn __reduce192<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Location = Uint => ActionFn(40);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant55(__nt), __end));
        (1, 105)
    }
    pub(crate) fn __reduce193<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // LogicalAnd = Tier<LogicalAndOP, Equality> => ActionFn(60);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 106)
    }
    pub(crate) fn __reduce194<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // LogicalAndOP = "&&" => ActionFn(61);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 107)
    }
    pub(crate) fn __reduce195<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // LogicalOr = Tier<LogicalOrOP, LogicalAnd> => ActionFn(58);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 108)
    }
    pub(crate) fn __reduce196<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // LogicalOrOP = "||" => ActionFn(59);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 109)
    }
    pub(crate) fn __reduce197<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Multiplicative = Tier<MultiplicativeOp, Unary> => ActionFn(79);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 110)
    }
    pub(crate) fn __reduce198<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MultiplicativeOp = "/" => ActionFn(80);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action80::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce199<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MultiplicativeOp = "*" => ActionFn(81);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce200<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MultiplicativeOp = "%" => ActionFn(82);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 111)
    }
    pub(crate) fn __reduce201<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Program =  => ActionFn(409);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action409::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (0, 112)
    }
    pub(crate) fn __reduce202<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Program = Item+ => ActionFn(410);
        let __sym0 = __pop_Variant52(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action410::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant52(__nt), __end));
        (1, 112)
    }
    pub(crate) fn __reduce203<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Return = "->", Ty => ActionFn(19);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action19::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 113)
    }
    pub(crate) fn __reduce204<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Return? = Return => ActionFn(166);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action166::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 114)
    }
    pub(crate) fn __reduce205<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Return? =  => ActionFn(167);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action167::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 114)
    }
    pub(crate) fn __reduce206<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<AdditiveOp> = AdditiveOp => ActionFn(343);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action343::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 115)
    }
    pub(crate) fn __reduce207<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<BitWiseAndOP> = BitWiseAndOP => ActionFn(344);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action344::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 116)
    }
    pub(crate) fn __reduce208<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<BitWiseOrOP> = BitWiseOrOP => ActionFn(345);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action345::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 117)
    }
    pub(crate) fn __reduce209<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<BitWiseXorOP> = BitWiseXorOP => ActionFn(346);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action346::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 118)
    }
    pub(crate) fn __reduce210<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<ComparisonOp> = ComparisonOp => ActionFn(347);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action347::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 119)
    }
    pub(crate) fn __reduce211<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<EqualityOp> = EqualityOp => ActionFn(348);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action348::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 120)
    }
    pub(crate) fn __reduce212<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<LogicalAndOP> = LogicalAndOP => ActionFn(349);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action349::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 121)
    }
    pub(crate) fn __reduce213<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<LogicalOrOP> = LogicalOrOP => ActionFn(350);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action350::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 122)
    }
    pub(crate) fn __reduce214<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<MultiplicativeOp> = MultiplicativeOp => ActionFn(351);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action351::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant56(__nt), __end));
        (1, 123)
    }
    pub(crate) fn __reduce215<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Spanned<UnaryOp> = UnaryOp => ActionFn(352);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action352::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant57(__nt), __end));
        (1, 124)
    }
    pub(crate) fn __reduce216<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = StmtKind => ActionFn(353);
        let __sym0 = __pop_Variant58(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action353::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 125)
    }
    pub(crate) fn __reduce217<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // StmtKind = Expr => ActionFn(51);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (1, 126)
    }
    pub(crate) fn __reduce218<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // StmtKind = "let", Local => ActionFn(52);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant54(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action52::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (2, 126)
    }
    pub(crate) fn __reduce219<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // StmtKind = Ident, "=", Expr => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant58(__nt), __end));
        (3, 126)
    }
    pub(crate) fn __reduce220<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Struct = "{", CommaAtLeastOne<StructField>, "}" => ActionFn(10);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action10::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (3, 127)
    }
    pub(crate) fn __reduce221<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Struct = "(", CommaAtLeastOne<Ty>, ")", ";" => ActionFn(11);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action11::<>(__sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (4, 127)
    }
    pub(crate) fn __reduce222<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Struct = ";" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant59(__nt), __end));
        (1, 127)
    }
    pub(crate) fn __reduce223<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // StructField = Ident, ":", Ty => ActionFn(354);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant49(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action354::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 128)
    }
    pub(crate) fn __reduce224<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // StructField? = StructField => ActionFn(229);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action229::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (1, 129)
    }
    pub(crate) fn __reduce225<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // StructField? =  => ActionFn(230);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action230::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant60(__nt), __end));
        (0, 129)
    }
    pub(crate) fn __reduce226<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Symbol = "identifier" => ActionFn(35);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 130)
    }
    pub(crate) fn __reduce227<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<AdditiveOp, Multiplicative> = Tier<AdditiveOp, Multiplicative>, AdditiveOp, Multiplicative => ActionFn(415);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action415::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 131)
    }
    pub(crate) fn __reduce228<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<AdditiveOp, Multiplicative> = Multiplicative => ActionFn(127);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action127::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 131)
    }
    pub(crate) fn __reduce229<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<BitWiseAndOP, Additive> = Tier<BitWiseAndOP, Additive>, BitWiseAndOP, Additive => ActionFn(416);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action416::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 132)
    }
    pub(crate) fn __reduce230<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<BitWiseAndOP, Additive> = Additive => ActionFn(129);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action129::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 132)
    }
    pub(crate) fn __reduce231<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<BitWiseOrOP, BitWiseXor> = Tier<BitWiseOrOP, BitWiseXor>, BitWiseOrOP, BitWiseXor => ActionFn(417);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action417::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 133)
    }
    pub(crate) fn __reduce232<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<BitWiseOrOP, BitWiseXor> = BitWiseXor => ActionFn(133);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action133::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 133)
    }
    pub(crate) fn __reduce233<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<BitWiseXorOP, BitWiseAnd> = Tier<BitWiseXorOP, BitWiseAnd>, BitWiseXorOP, BitWiseAnd => ActionFn(418);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action418::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 134)
    }
    pub(crate) fn __reduce234<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<BitWiseXorOP, BitWiseAnd> = BitWiseAnd => ActionFn(131);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action131::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 134)
    }
    pub(crate) fn __reduce235<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<ComparisonOp, BitWiseOr> = Tier<ComparisonOp, BitWiseOr>, ComparisonOp, BitWiseOr => ActionFn(419);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action419::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 135)
    }
    pub(crate) fn __reduce236<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<ComparisonOp, BitWiseOr> = BitWiseOr => ActionFn(135);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action135::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 135)
    }
    pub(crate) fn __reduce237<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<EqualityOp, Comparison> = Tier<EqualityOp, Comparison>, EqualityOp, Comparison => ActionFn(420);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action420::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 136)
    }
    pub(crate) fn __reduce238<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<EqualityOp, Comparison> = Comparison => ActionFn(137);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action137::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 136)
    }
    pub(crate) fn __reduce239<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<LogicalAndOP, Equality> = Tier<LogicalAndOP, Equality>, LogicalAndOP, Equality => ActionFn(421);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action421::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 137)
    }
    pub(crate) fn __reduce240<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<LogicalAndOP, Equality> = Equality => ActionFn(139);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action139::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 137)
    }
    pub(crate) fn __reduce241<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<LogicalOrOP, LogicalAnd> = Tier<LogicalOrOP, LogicalAnd>, LogicalOrOP, LogicalAnd => ActionFn(422);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action422::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 138)
    }
    pub(crate) fn __reduce242<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<LogicalOrOP, LogicalAnd> = LogicalAnd => ActionFn(141);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action141::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 138)
    }
    pub(crate) fn __reduce243<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<MultiplicativeOp, Unary> = Tier<MultiplicativeOp, Unary>, MultiplicativeOp, Unary => ActionFn(423);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action423::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 139)
    }
    pub(crate) fn __reduce244<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Tier<MultiplicativeOp, Unary> = Unary => ActionFn(125);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action125::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 139)
    }
    pub(crate) fn __reduce245<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TupleParser = "(", CommaAtLeastTwo<Ty>, ")" => ActionFn(26);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action26::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 140)
    }
    pub(crate) fn __reduce246<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Ty = TypeKind => ActionFn(364);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action364::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 141)
    }
    pub(crate) fn __reduce247<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Ty? = Ty => ActionFn(182);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action182::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 142)
    }
    pub(crate) fn __reduce248<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Ty? =  => ActionFn(183);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action183::<>(&__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 142)
    }
    pub(crate) fn __reduce249<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TypeKind = AtomType => ActionFn(23);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce250<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TypeKind = "(", AtomType, ")" => ActionFn(24);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action24::<>(__sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (3, 143)
    }
    pub(crate) fn __reduce251<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TypeKind = TupleParser => ActionFn(25);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 143)
    }
    pub(crate) fn __reduce252<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Uint = "2" => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action45::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce253<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Uint = "3" => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action46::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce254<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Uint = "4" => ActionFn(47);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action47::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce255<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Uint = "uint" => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action48::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 144)
    }
    pub(crate) fn __reduce256<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Unary = UnaryOp, Unary => ActionFn(424);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant61(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action424::<>(__sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 145)
    }
    pub(crate) fn __reduce257<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Unary = Index => ActionFn(84);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 145)
    }
    pub(crate) fn __reduce258<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // UnaryOp = "!" => ActionFn(85);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce259<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // UnaryOp = "-" => ActionFn(86);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action86::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant61(__nt), __end));
        (1, 146)
    }
    pub(crate) fn __reduce260<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // VectorSize = "2" => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce261<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // VectorSize = "3" => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 147)
    }
    pub(crate) fn __reduce262<
    >(
        __lookahead_start: Option<&Loc>,
        __symbols: &mut ::std::vec::Vec<(Loc,__Symbol<>,Loc)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // VectorSize = "4" => ActionFn(33);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action33::<>(__sym0);
        __symbols.push((__start, __Symbol::Variant62(__nt), __end));
        (1, 147)
    }
}
pub use self::__parse__Program::ProgramParser;

fn __action0<
>(
    (_, __0, _): (Loc, ::std::vec::Vec<Item>, Loc),
) -> ::std::vec::Vec<Item>
{
    __0
}

fn __action1<
>(
    (_, __0, _): (Loc, ::std::vec::Vec<Item>, Loc),
) -> ::std::vec::Vec<Item>
{
    __0
}

fn __action2<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, kind, _): (Loc, StructKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Item
{
    Item {
                ident,
                kind: ItemKind::Struct(kind),
                span: Span::range(l,r)
            }
}

fn __action3<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, binding, _): (Loc, GlobalBinding, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ty, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Item
{
    Item {
                    ident,
                    kind: ItemKind::Global(binding, ty),
                    span: Span::range(l,r)
                }
}

fn __action4<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, stage, _): (Loc, EntryPointStage, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, sig_l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, sig_r, _): (Loc, Loc, Loc),
    (_, body, _): (Loc, Block, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Item
{
    Item {
                    ident,
                    kind: ItemKind::EntryPoint(stage, Function {
                        sig: FnSig {
                            args: Vec::new(),
                            ret: None,
                            span: Span::range(sig_l, sig_r)
                        },
                        body
                    }),
                    span: Span::range(l,r)
                }
}

fn __action5<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, generics, _): (Loc, Generics, Loc),
    (_, fun, _): (Loc, Function, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Item
{
    Item {
                ident,
                kind: ItemKind::Fn(generics, fun),
                span: Span::range(l,r)
            }
}

fn __action6<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, constant, _): (Loc, Constant, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Item
{
    Item {
                ident,
                kind: ItemKind::Const(constant),
                span: Span::range(l,r)
            }
}

fn __action7<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, sig, _): (Loc, FnSig, Loc),
    (_, r, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> Item
{
    Item {
                    ident,
                    kind: ItemKind::Extern(sig),
                    span: Span::range(l,r)
                }
}

fn __action8<
>(
    (_, sig, _): (Loc, FnSig, Loc),
    (_, body, _): (Loc, Block, Loc),
) -> Function
{
    Function { sig:sig, body:body }
}

fn __action9<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, args, _): (Loc, Vec<IdentTypePair>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ret, _): (Loc, ::std::option::Option<Ty>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> FnSig
{
    FnSig {
        args,
        ret,
        span: Span::range(l,r)
    }
}

fn __action10<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Vec<StructField>, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> StructKind
{
    StructKind::Struct(__0)
}

fn __action11<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Vec<Ty>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> StructKind
{
    StructKind::Tuple (__0)
}

fn __action12<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> StructKind
{
    StructKind::Unit
}

fn __action13<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ty, _): (Loc, Ty, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> StructField
{
    StructField {
        ident,
        ty,
        span: Span::range(l,r)
    }
}

fn __action14<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, ty, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, init, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> Constant
{
    Constant { ty:ty, init:init }
}

fn __action15<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, params, _): (Loc, Vec<GenericParam>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Generics
{
    Generics {
            params,
            span: Span::range(l,r)
        }
}

fn __action16<
>(
    (_, __0, _): (Loc, (), Loc),
) -> Generics
{
    Generics {
            params: Vec::new(),
            span: Span::none()
        }
}

fn __action17<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, bound, _): (Loc, ::std::option::Option<GenericBound>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> GenericParam
{
    GenericParam { 
            ident,
            bound,
            span: Span::range(l,r)
        }
}

fn __action18<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, ident, _): (Loc, Ident, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ty, _): (Loc, Ty, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> IdentTypePair
{
    IdentTypePair { 
        ident,
        ty,
        span: Span::range(l,r)
    }
}

fn __action19<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Ty, Loc),
) -> Ty
{
    __0
}

fn __action20<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, kind, _): (Loc, GenericBoundKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> GenericBound
{
    GenericBound { 
        kind,
        span: Span::range(l,r)
    }
}

fn __action21<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, args, _): (Loc, Vec<Ty>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, ret, _): (Loc, ::std::option::Option<Ty>, Loc),
) -> GenericBoundKind
{
    GenericBoundKind::Fn { args:args, ret:ret }
}

fn __action22<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, kind, _): (Loc, TypeKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Ty
{
    Ty { kind, span: Span::range(l,r) }
}

fn __action23<
>(
    (_, __0, _): (Loc, TypeKind, Loc),
) -> TypeKind
{
    __0
}

fn __action24<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, TypeKind, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> TypeKind
{
    __0
}

fn __action25<
>(
    (_, __0, _): (Loc, TypeKind, Loc),
) -> TypeKind
{
    __0
}

fn __action26<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Vec<Ty>, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> TypeKind
{
    TypeKind::Tuple(__0)
}

fn __action27<
>(
    (_, __0, _): (Loc, Ident, Loc),
) -> TypeKind
{
    TypeKind::Named(__0)
}

fn __action28<
>(
    (_, __0, _): (Loc, ScalarType, Loc),
) -> TypeKind
{
    TypeKind::ScalarType(__0)
}

fn __action29<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, VectorSize, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, __1, _): (Loc, ScalarType, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> TypeKind
{
    TypeKind::Vector(__0, __1)
}

fn __action30<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, columns, _): (Loc, VectorSize, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, rows, _): (Loc, VectorSize, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> TypeKind
{
    TypeKind::Matrix { columns:columns, rows:rows }
}

fn __action31<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> VectorSize
{
    VectorSize::Bi
}

fn __action32<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> VectorSize
{
    VectorSize::Tri
}

fn __action33<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> VectorSize
{
    VectorSize::Quad
}

fn __action34<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, symbol, _): (Loc, Symbol, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Ident
{
    Ident {
        symbol,
        span: Span::range(l,r)
    }
}

fn __action35<
>(
    (_, __0, _): (Loc, Symbol, Loc),
) -> Symbol
{
    __0
}

fn __action36<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> GlobalBinding
{
    GlobalBinding::Position
}

fn __action37<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, u32, Loc),
) -> GlobalBinding
{
    GlobalBinding::Input(__0)
}

fn __action38<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, u32, Loc),
) -> GlobalBinding
{
    GlobalBinding::Output(__0)
}

fn __action39<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, set, _): (Loc, u32, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, binding, _): (Loc, u32, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> GlobalBinding
{
    GlobalBinding::Uniform { set:set, binding:binding }
}

fn __action40<
>(
    (_, __0, _): (Loc, u64, Loc),
) -> u32
{
    __0 as u32
}

fn __action41<
>(
    (_, __0, _): (Loc, u64, Loc),
) -> Literal
{
    Literal::Uint(__0)
}

fn __action42<
>(
    (_, __0, _): (Loc, i64, Loc),
) -> Literal
{
    Literal::Int(__0)
}

fn __action43<
>(
    (_, __0, _): (Loc, f64, Loc),
) -> Literal
{
    Literal::Float(__0)
}

fn __action44<
>(
    (_, __0, _): (Loc, bool, Loc),
) -> Literal
{
    Literal::Boolean(__0)
}

fn __action45<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> u64
{
    2
}

fn __action46<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> u64
{
    3
}

fn __action47<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> u64
{
    4
}

fn __action48<
>(
    (_, __0, _): (Loc, u64, Loc),
) -> u64
{
    __0
}

fn __action49<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut stmts, _): (Loc, ::std::vec::Vec<Stmt>, Loc),
    (_, f, _): (Loc, ::std::option::Option<Stmt>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Block
{
    {
        if let Some(f) = f {
            stmts.push(f)
        }

        Block {
            stmts,
            span: Span::range(l,r)
        }
    }
}

fn __action50<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, kind, _): (Loc, StmtKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Stmt
{
    Stmt {
        kind,
        span: Span::range(l,r)
    }
}

fn __action51<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> StmtKind
{
    StmtKind::ExprSemi(__0)
}

fn __action52<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Local, Loc),
) -> StmtKind
{
    StmtKind::Local(__0)
}

fn __action53<
>(
    (_, ident, _): (Loc, Ident, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, expr, _): (Loc, Expr, Loc),
) -> StmtKind
{
    StmtKind::Assignment { ident:ident, expr:expr }
}

fn __action54<
>(
    (_, ident, _): (Loc, Ident, Loc),
    (_, ty, _): (Loc, ::std::option::Option<Ty>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, init, _): (Loc, Expr, Loc),
) -> Local
{
    Local { ident:ident, ty:ty, init:init }
}

fn __action55<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, expr, _): (Loc, Expr, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Stmt
{
    Stmt {
        kind: StmtKind::Expr(expr),
        span: Span::range(l,r)
    }
}

fn __action56<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, expr, _): (Loc, ::std::option::Option<Box<Expr>>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr {
                kind: ExprKind::Return(expr),
                span: Span::range(l,r)
            }
}

fn __action57<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action58<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action59<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::LogicalOr
}

fn __action60<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action61<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::LogicalAnd
}

fn __action62<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action63<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Equality
}

fn __action64<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Inequality
}

fn __action65<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action66<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Greater
}

fn __action67<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::GreaterEqual
}

fn __action68<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Less
}

fn __action69<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::LessEqual
}

fn __action70<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action71<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::BitWiseOr
}

fn __action72<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action73<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::BitWiseXor
}

fn __action74<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action75<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::BitWiseAnd
}

fn __action76<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action77<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Addition
}

fn __action78<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Subtraction
}

fn __action79<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action80<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Division
}

fn __action81<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Multiplication
}

fn __action82<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> BinaryOp
{
    BinaryOp::Remainder
}

fn __action83<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, op, _): (Loc, Spanned<UnaryOp>, Loc),
    (_, tgt, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
            kind: ExprKind::UnaryOp { op, tgt },
            span: Span::range(l,r)
        }
}

fn __action84<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action85<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> UnaryOp
{
    UnaryOp::BitWiseNot
}

fn __action86<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> UnaryOp
{
    UnaryOp::Negation
}

fn __action87<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, base, _): (Loc, Box<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, index, _): (Loc, Box<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr {
            kind: ExprKind::Index { base, index },
            span: Span::range(l,r)
        }
}

fn __action88<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action89<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, base, _): (Loc, Box<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, field, _): (Loc, Field, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr {
            kind: ExprKind::Access { base, field },
            span: Span::range(l,r)
        }
}

fn __action90<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action91<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, kind, _): (Loc, FieldKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Field
{
    Field {
        kind,
        span: Span::range(l,r)
    }
}

fn __action92<
>(
    (_, __0, _): (Loc, Symbol, Loc),
) -> FieldKind
{
    FieldKind::Named(__0)
}

fn __action93<
>(
    (_, __0, _): (Loc, u32, Loc),
) -> FieldKind
{
    FieldKind::Uint(__0)
}

fn __action94<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, fun, _): (Loc, Box<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, args, _): (Loc, Vec<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr {
            kind: ExprKind::Call { fun, args },
            span: Span::range(l,r)
        }
}

fn __action95<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action96<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> Expr
{
    __0
}

fn __action97<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, kind, _): (Loc, ExprKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr {
            kind,
            span: Span::range(l,r)
        }
}

fn __action98<
>(
    (_, __0, _): (Loc, Literal, Loc),
) -> ExprKind
{
    ExprKind::Literal(__0)
}

fn __action99<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Vec<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> ExprKind
{
    ExprKind::TupleConstructor(__0)
}

fn __action100<
>(
    (_, ty, _): (Loc, (ConstructorType, VectorSize), Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, elements, _): (Loc, Vec<Expr>, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> ExprKind
{
    ExprKind::Constructor {
            ty: ty.0,
            size: ty.1,
            elements
        }
}

fn __action101<
>(
    (_, __0, _): (Loc, Ident, Loc),
) -> ExprKind
{
    ExprKind::Variable(__0)
}

fn __action102<
>(
    (_, __0, _): (Loc, ExprKind, Loc),
) -> ExprKind
{
    __0
}

fn __action103<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, condition, _): (Loc, Box<Expr>, Loc),
    (_, accept, _): (Loc, Block, Loc),
    (_, reject, _): (Loc, Block, Loc),
) -> ExprKind
{
    ExprKind::If { condition:condition, accept:accept, reject:reject }
}

fn __action104<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Block, Loc),
) -> Block
{
    __0
}

fn __action105<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, l, _): (Loc, Loc, Loc),
    (_, kind, _): (Loc, ExprKind, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Block
{
    Block {
        stmts: vec![
            Stmt {
                kind: StmtKind::Expr(Expr {
                    kind,
                    span: Span::range(l,r)
                }),
                span: Span::range(l,r)
            },
        ],
        span: Span::range(l,r)
    }
}

fn __action106<
>(
    (_, __0, _): (Loc, (), Loc),
) -> Block
{
    Block {
        stmts: Vec::new(),
        span: Span::None
    }
}

fn __action107<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, expr, _): (Loc, Expr, Loc),
    (_, block, _): (Loc, Block, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> ElseIf
{
    ElseIf {
        expr,
        block,
        span: Span::range(l,r)
    }
}

fn __action108<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> (ConstructorType, VectorSize)
{
    (ConstructorType::Vector, VectorSize::Bi)
}

fn __action109<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> (ConstructorType, VectorSize)
{
    (ConstructorType::Vector, VectorSize::Tri)
}

fn __action110<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> (ConstructorType, VectorSize)
{
    (ConstructorType::Vector, VectorSize::Quad)
}

fn __action111<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> (ConstructorType, VectorSize)
{
    (ConstructorType::Matrix, VectorSize::Bi)
}

fn __action112<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> (ConstructorType, VectorSize)
{
    (ConstructorType::Matrix, VectorSize::Tri)
}

fn __action113<
>(
    (_, __0, _): (Loc, Token, Loc),
) -> (ConstructorType, VectorSize)
{
    (ConstructorType::Matrix, VectorSize::Quad)
}

fn __action114<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Vec<Expr>
{
    vec![__0]
}

fn __action115<
>(
    (_, a, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut v, _): (Loc, Vec<Expr>, Loc),
) -> Vec<Expr>
{
    {
        let mut tmp = vec![a];
        tmp.append(&mut v);
        tmp
    }
}

fn __action116<
>(
    (_, a, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, b, _): (Loc, Expr, Loc),
) -> Vec<Expr>
{
    vec![a, b]
}

fn __action117<
>(
    (_, a, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, b, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut v, _): (Loc, Vec<Expr>, Loc),
) -> Vec<Expr>
{
    {
        let mut tmp = vec![a, b];
        tmp.append(&mut v);
        tmp
    }
}

fn __action118<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Expr>, Loc),
    (_, e, _): (Loc, ::std::option::Option<Expr>, Loc),
) -> Vec<Expr>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action119<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action120<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action121<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action122<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action123<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, UnaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<UnaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action124<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action125<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action126<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action127<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action128<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action129<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action130<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action131<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action132<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action133<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action134<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action135<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action136<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action137<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action138<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action139<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action140<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, left, _): (Loc, Box<Expr>, Loc),
    (_, op, _): (Loc, Spanned<BinaryOp>, Loc),
    (_, right, _): (Loc, Box<Expr>, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Expr
{
    Expr { 
                kind: ExprKind::BinaryOp {
                    left, op, right
                },
                span: Span::range(l,r)
            }
}

fn __action141<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> Expr
{
    __0
}

fn __action142<
>(
    (_, __0, _): (Loc, Box<Expr>, Loc),
) -> ::std::option::Option<Box<Expr>>
{
    Some(__0)
}

fn __action143<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<Box<Expr>>
{
    None
}

fn __action144<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action145<
>(
    (_, __0, _): (Loc, Ty, Loc),
) -> ::std::option::Option<Ty>
{
    Some(__0)
}

fn __action146<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<Ty>
{
    None
}

fn __action147<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, Ty, Loc),
) -> Ty
{
    __0
}

fn __action148<
>(
    (_, __0, _): (Loc, Stmt, Loc),
) -> ::std::option::Option<Stmt>
{
    Some(__0)
}

fn __action149<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<Stmt>
{
    None
}

fn __action150<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<Stmt>
{
    vec![]
}

fn __action151<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Stmt>, Loc),
) -> ::std::vec::Vec<Stmt>
{
    v
}

fn __action152<
>(
    (_, __0, _): (Loc, Stmt, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> Stmt
{
    __0
}

fn __action153<
>(
    (_, a, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, b, _): (Loc, Ty, Loc),
) -> Vec<Ty>
{
    vec![a, b]
}

fn __action154<
>(
    (_, a, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, b, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut v, _): (Loc, Vec<Ty>, Loc),
) -> Vec<Ty>
{
    {
        let mut tmp = vec![a, b];
        tmp.append(&mut v);
        tmp
    }
}

fn __action155<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Ty>, Loc),
    (_, e, _): (Loc, ::std::option::Option<Ty>, Loc),
) -> Vec<Ty>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action156<
>(
    (_, __0, _): (Loc, GenericBound, Loc),
) -> ::std::option::Option<GenericBound>
{
    Some(__0)
}

fn __action157<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<GenericBound>
{
    None
}

fn __action158<
>(
    (_, _, _): (Loc, Token, Loc),
    (_, __0, _): (Loc, GenericBound, Loc),
) -> GenericBound
{
    __0
}

fn __action159<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ()
{
    ()
}

fn __action160<
>(
    (_, __0, _): (Loc, GenericParam, Loc),
) -> Vec<GenericParam>
{
    vec![__0]
}

fn __action161<
>(
    (_, a, _): (Loc, GenericParam, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut v, _): (Loc, Vec<GenericParam>, Loc),
) -> Vec<GenericParam>
{
    {
        let mut tmp = vec![a];
        tmp.append(&mut v);
        tmp
    }
}

fn __action162<
>(
    (_, __0, _): (Loc, Ty, Loc),
) -> Vec<Ty>
{
    vec![__0]
}

fn __action163<
>(
    (_, a, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut v, _): (Loc, Vec<Ty>, Loc),
) -> Vec<Ty>
{
    {
        let mut tmp = vec![a];
        tmp.append(&mut v);
        tmp
    }
}

fn __action164<
>(
    (_, __0, _): (Loc, StructField, Loc),
) -> Vec<StructField>
{
    vec![__0]
}

fn __action165<
>(
    (_, a, _): (Loc, StructField, Loc),
    (_, _, _): (Loc, Token, Loc),
    (_, mut v, _): (Loc, Vec<StructField>, Loc),
) -> Vec<StructField>
{
    {
        let mut tmp = vec![a];
        tmp.append(&mut v);
        tmp
    }
}

fn __action166<
>(
    (_, __0, _): (Loc, Ty, Loc),
) -> ::std::option::Option<Ty>
{
    Some(__0)
}

fn __action167<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<Ty>
{
    None
}

fn __action168<
>(
    (_, v, _): (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
    (_, e, _): (Loc, ::std::option::Option<IdentTypePair>, Loc),
) -> Vec<IdentTypePair>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action169<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Loc
{
    __lookbehind.clone()
}

fn __action170<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Loc
{
    __lookahead.clone()
}

fn __action171<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<Item>
{
    vec![]
}

fn __action172<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Item>, Loc),
) -> ::std::vec::Vec<Item>
{
    v
}

fn __action173<
>(
    (_, __0, _): (Loc, Item, Loc),
) -> ::std::vec::Vec<Item>
{
    vec![__0]
}

fn __action174<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Item>, Loc),
    (_, e, _): (Loc, Item, Loc),
) -> ::std::vec::Vec<Item>
{
    { let mut v = v; v.push(e); v }
}

fn __action175<
>(
    (_, __0, _): (Loc, IdentTypePair, Loc),
) -> ::std::option::Option<IdentTypePair>
{
    Some(__0)
}

fn __action176<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<IdentTypePair>
{
    None
}

fn __action177<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<IdentTypePair>
{
    vec![]
}

fn __action178<
>(
    (_, v, _): (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
) -> ::std::vec::Vec<IdentTypePair>
{
    v
}

fn __action179<
>(
    (_, __0, _): (Loc, IdentTypePair, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> IdentTypePair
{
    __0
}

fn __action180<
>(
    (_, v, _): (Loc, ::std::vec::Vec<StructField>, Loc),
    (_, e, _): (Loc, ::std::option::Option<StructField>, Loc),
) -> Vec<StructField>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action181<
>(
    (_, v, _): (Loc, ::std::vec::Vec<GenericParam>, Loc),
    (_, e, _): (Loc, ::std::option::Option<GenericParam>, Loc),
) -> Vec<GenericParam>
{
    match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

fn __action182<
>(
    (_, __0, _): (Loc, Ty, Loc),
) -> ::std::option::Option<Ty>
{
    Some(__0)
}

fn __action183<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<Ty>
{
    None
}

fn __action184<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<Ty>
{
    vec![]
}

fn __action185<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Ty>, Loc),
) -> ::std::vec::Vec<Ty>
{
    v
}

fn __action186<
>(
    (_, __0, _): (Loc, Ty, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> Ty
{
    __0
}

fn __action187<
>(
    (_, __0, _): (Loc, Stmt, Loc),
) -> ::std::vec::Vec<Stmt>
{
    vec![__0]
}

fn __action188<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Stmt>, Loc),
    (_, e, _): (Loc, Stmt, Loc),
) -> ::std::vec::Vec<Stmt>
{
    { let mut v = v; v.push(e); v }
}

fn __action189<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action190<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action191<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action192<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action193<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action194<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action195<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action196<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action197<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action198<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action199<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action200<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action201<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action202<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action203<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action204<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action205<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action206<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action207<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action208<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action209<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action210<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action211<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action212<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action213<
>(
    (_, l, _): (Loc, Loc, Loc),
    (_, rule, _): (Loc, BinaryOp, Loc),
    (_, r, _): (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    Spanned {
            node: rule,
            span: Span::range(l,r)
        }
}

fn __action214<
>(
    (_, rule, _): (Loc, Expr, Loc),
) -> Box<Expr>
{
    Box::new(rule)
}

fn __action215<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> ::std::option::Option<Expr>
{
    Some(__0)
}

fn __action216<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<Expr>
{
    None
}

fn __action217<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<Expr>
{
    vec![]
}

fn __action218<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Expr>, Loc),
) -> ::std::vec::Vec<Expr>
{
    v
}

fn __action219<
>(
    (_, __0, _): (Loc, Expr, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> Expr
{
    __0
}

fn __action220<
>(
    (_, __0, _): (Loc, Expr, Loc),
) -> ::std::vec::Vec<Expr>
{
    vec![__0]
}

fn __action221<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Expr>, Loc),
    (_, e, _): (Loc, Expr, Loc),
) -> ::std::vec::Vec<Expr>
{
    { let mut v = v; v.push(e); v }
}

fn __action222<
>(
    (_, __0, _): (Loc, Ty, Loc),
) -> ::std::vec::Vec<Ty>
{
    vec![__0]
}

fn __action223<
>(
    (_, v, _): (Loc, ::std::vec::Vec<Ty>, Loc),
    (_, e, _): (Loc, Ty, Loc),
) -> ::std::vec::Vec<Ty>
{
    { let mut v = v; v.push(e); v }
}

fn __action224<
>(
    (_, __0, _): (Loc, GenericParam, Loc),
) -> ::std::option::Option<GenericParam>
{
    Some(__0)
}

fn __action225<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<GenericParam>
{
    None
}

fn __action226<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<GenericParam>
{
    vec![]
}

fn __action227<
>(
    (_, v, _): (Loc, ::std::vec::Vec<GenericParam>, Loc),
) -> ::std::vec::Vec<GenericParam>
{
    v
}

fn __action228<
>(
    (_, __0, _): (Loc, GenericParam, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> GenericParam
{
    __0
}

fn __action229<
>(
    (_, __0, _): (Loc, StructField, Loc),
) -> ::std::option::Option<StructField>
{
    Some(__0)
}

fn __action230<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::option::Option<StructField>
{
    None
}

fn __action231<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<StructField>
{
    vec![]
}

fn __action232<
>(
    (_, v, _): (Loc, ::std::vec::Vec<StructField>, Loc),
) -> ::std::vec::Vec<StructField>
{
    v
}

fn __action233<
>(
    (_, __0, _): (Loc, StructField, Loc),
    (_, _, _): (Loc, Token, Loc),
) -> StructField
{
    __0
}

fn __action234<
>(
    (_, __0, _): (Loc, IdentTypePair, Loc),
) -> ::std::vec::Vec<IdentTypePair>
{
    vec![__0]
}

fn __action235<
>(
    (_, v, _): (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
    (_, e, _): (Loc, IdentTypePair, Loc),
) -> ::std::vec::Vec<IdentTypePair>
{
    { let mut v = v; v.push(e); v }
}

fn __action236<
>(
    (_, __0, _): (Loc, StructField, Loc),
) -> ::std::vec::Vec<StructField>
{
    vec![__0]
}

fn __action237<
>(
    (_, v, _): (Loc, ::std::vec::Vec<StructField>, Loc),
    (_, e, _): (Loc, StructField, Loc),
) -> ::std::vec::Vec<StructField>
{
    { let mut v = v; v.push(e); v }
}

fn __action238<
>(
    (_, __0, _): (Loc, GenericParam, Loc),
) -> ::std::vec::Vec<GenericParam>
{
    vec![__0]
}

fn __action239<
>(
    (_, v, _): (Loc, ::std::vec::Vec<GenericParam>, Loc),
    (_, e, _): (Loc, GenericParam, Loc),
) -> ::std::vec::Vec<GenericParam>
{
    { let mut v = v; v.push(e); v }
}

fn __action240<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, GenericBound, Loc),
) -> ::std::option::Option<GenericBound>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action158(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        __temp0,
    )
}

fn __action241<
>(
    __0: (Loc, Loc, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, Token, Loc),
    __3: (Loc, GenericBound, Loc),
    __4: (Loc, Loc, Loc),
) -> GenericParam
{
    let __start0 = __2.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action240(
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        __0,
        __1,
        __temp0,
        __4,
    )
}

fn __action242<
>(
    __0: (Loc, Loc, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, Loc, Loc),
) -> GenericParam
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action157(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17(
        __0,
        __1,
        __temp0,
        __2,
    )
}

fn __action243<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ty, Loc),
) -> ::std::option::Option<Ty>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action147(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        __temp0,
    )
}

fn __action244<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ty, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Expr, Loc),
) -> Local
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action243(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        __0,
        __temp0,
        __3,
        __4,
    )
}

fn __action245<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Expr, Loc),
) -> Local
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action146(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        __0,
        __temp0,
        __1,
        __2,
    )
}

fn __action246<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Block
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action159(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action106(
        __temp0,
    )
}

fn __action247<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Generics
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action159(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action16(
        __temp0,
    )
}

fn __action248<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Token, Loc),
) -> ::std::vec::Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action219(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action220(
        __temp0,
    )
}

fn __action249<
>(
    __0: (Loc, ::std::vec::Vec<Expr>, Loc),
    __1: (Loc, Expr, Loc),
    __2: (Loc, Token, Loc),
) -> ::std::vec::Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action219(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action221(
        __0,
        __temp0,
    )
}

fn __action250<
>(
    __0: (Loc, ::std::option::Option<Expr>, Loc),
) -> Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action217(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        __temp0,
        __0,
    )
}

fn __action251<
>(
    __0: (Loc, ::std::vec::Vec<Expr>, Loc),
    __1: (Loc, ::std::option::Option<Expr>, Loc),
) -> Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action218(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        __temp0,
        __1,
    )
}

fn __action252<
>(
    __0: (Loc, GenericParam, Loc),
    __1: (Loc, Token, Loc),
) -> ::std::vec::Vec<GenericParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action228(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action238(
        __temp0,
    )
}

fn __action253<
>(
    __0: (Loc, ::std::vec::Vec<GenericParam>, Loc),
    __1: (Loc, GenericParam, Loc),
    __2: (Loc, Token, Loc),
) -> ::std::vec::Vec<GenericParam>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action228(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action239(
        __0,
        __temp0,
    )
}

fn __action254<
>(
    __0: (Loc, ::std::option::Option<GenericParam>, Loc),
) -> Vec<GenericParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action226(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        __temp0,
        __0,
    )
}

fn __action255<
>(
    __0: (Loc, ::std::vec::Vec<GenericParam>, Loc),
    __1: (Loc, ::std::option::Option<GenericParam>, Loc),
) -> Vec<GenericParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action227(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        __temp0,
        __1,
    )
}

fn __action256<
>(
    __0: (Loc, IdentTypePair, Loc),
    __1: (Loc, Token, Loc),
) -> ::std::vec::Vec<IdentTypePair>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action179(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action234(
        __temp0,
    )
}

fn __action257<
>(
    __0: (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
    __1: (Loc, IdentTypePair, Loc),
    __2: (Loc, Token, Loc),
) -> ::std::vec::Vec<IdentTypePair>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action179(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action235(
        __0,
        __temp0,
    )
}

fn __action258<
>(
    __0: (Loc, ::std::option::Option<IdentTypePair>, Loc),
) -> Vec<IdentTypePair>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action177(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action168(
        __temp0,
        __0,
    )
}

fn __action259<
>(
    __0: (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
    __1: (Loc, ::std::option::Option<IdentTypePair>, Loc),
) -> Vec<IdentTypePair>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action178(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action168(
        __temp0,
        __1,
    )
}

fn __action260<
>(
    __0: (Loc, Stmt, Loc),
    __1: (Loc, Token, Loc),
) -> ::std::vec::Vec<Stmt>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action152(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action187(
        __temp0,
    )
}

fn __action261<
>(
    __0: (Loc, ::std::vec::Vec<Stmt>, Loc),
    __1: (Loc, Stmt, Loc),
    __2: (Loc, Token, Loc),
) -> ::std::vec::Vec<Stmt>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action152(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action188(
        __0,
        __temp0,
    )
}

fn __action262<
>(
    __0: (Loc, Loc, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, ::std::option::Option<Stmt>, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Loc, Loc),
) -> Block
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action150(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
    )
}

fn __action263<
>(
    __0: (Loc, Loc, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, ::std::vec::Vec<Stmt>, Loc),
    __3: (Loc, ::std::option::Option<Stmt>, Loc),
    __4: (Loc, Token, Loc),
    __5: (Loc, Loc, Loc),
) -> Block
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action151(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

fn __action264<
>(
    __0: (Loc, StructField, Loc),
    __1: (Loc, Token, Loc),
) -> ::std::vec::Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action233(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action236(
        __temp0,
    )
}

fn __action265<
>(
    __0: (Loc, ::std::vec::Vec<StructField>, Loc),
    __1: (Loc, StructField, Loc),
    __2: (Loc, Token, Loc),
) -> ::std::vec::Vec<StructField>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action233(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action237(
        __0,
        __temp0,
    )
}

fn __action266<
>(
    __0: (Loc, ::std::option::Option<StructField>, Loc),
) -> Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action231(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        __temp0,
        __0,
    )
}

fn __action267<
>(
    __0: (Loc, ::std::vec::Vec<StructField>, Loc),
    __1: (Loc, ::std::option::Option<StructField>, Loc),
) -> Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action232(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        __temp0,
        __1,
    )
}

fn __action268<
>(
    __0: (Loc, Ty, Loc),
    __1: (Loc, Token, Loc),
) -> ::std::vec::Vec<Ty>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action186(
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action222(
        __temp0,
    )
}

fn __action269<
>(
    __0: (Loc, ::std::vec::Vec<Ty>, Loc),
    __1: (Loc, Ty, Loc),
    __2: (Loc, Token, Loc),
) -> ::std::vec::Vec<Ty>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action186(
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action223(
        __0,
        __temp0,
    )
}

fn __action270<
>(
    __0: (Loc, ::std::option::Option<Ty>, Loc),
) -> Vec<Ty>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action184(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        __temp0,
        __0,
    )
}

fn __action271<
>(
    __0: (Loc, ::std::vec::Vec<Ty>, Loc),
    __1: (Loc, ::std::option::Option<Ty>, Loc),
) -> Vec<Ty>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action185(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        __temp0,
        __1,
    )
}

fn __action272<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Field, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action273<
>(
    __0: (Loc, ExprKind, Loc),
    __1: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        __temp0,
        __0,
        __1,
    )
}

fn __action274<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::option::Option<Stmt>, Loc),
    __2: (Loc, Token, Loc),
    __3: (Loc, Loc, Loc),
) -> Block
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action262(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action275<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::vec::Vec<Stmt>, Loc),
    __2: (Loc, ::std::option::Option<Stmt>, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Loc, Loc),
) -> Block
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

fn __action276<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Vec<Expr>, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

fn __action277<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ExprKind, Loc),
    __2: (Loc, Loc, Loc),
) -> Block
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        __0,
        __temp0,
        __1,
        __2,
    )
}

fn __action278<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Expr, Loc),
    __3: (Loc, Block, Loc),
    __4: (Loc, Loc, Loc),
) -> ElseIf
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

fn __action279<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::option::Option<Box<Expr>>, Loc),
    __2: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        __temp0,
        __0,
        __1,
        __2,
    )
}

fn __action280<
>(
    __0: (Loc, FieldKind, Loc),
    __1: (Loc, Loc, Loc),
) -> Field
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        __temp0,
        __0,
        __1,
    )
}

fn __action281<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Loc, Loc),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action55(
        __temp0,
        __0,
        __1,
    )
}

fn __action282<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Vec<IdentTypePair>, Loc),
    __2: (Loc, Token, Loc),
    __3: (Loc, ::std::option::Option<Ty>, Loc),
    __4: (Loc, Loc, Loc),
) -> FnSig
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action9(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

fn __action283<
>(
    __0: (Loc, GenericBoundKind, Loc),
    __1: (Loc, Loc, Loc),
) -> GenericBound
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action20(
        __temp0,
        __0,
        __1,
    )
}

fn __action284<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, GenericBound, Loc),
    __3: (Loc, Loc, Loc),
) -> GenericParam
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action241(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action285<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Loc, Loc),
) -> GenericParam
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action242(
        __temp0,
        __0,
        __1,
    )
}

fn __action286<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Vec<GenericParam>, Loc),
    __2: (Loc, Token, Loc),
    __3: (Loc, Loc, Loc),
) -> Generics
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action287<
>(
    __0: (Loc, Symbol, Loc),
    __1: (Loc, Loc, Loc),
) -> Ident
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action34(
        __temp0,
        __0,
        __1,
    )
}

fn __action288<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ty, Loc),
    __3: (Loc, Loc, Loc),
) -> IdentTypePair
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action289<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

fn __action290<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, StructKind, Loc),
    __3: (Loc, Loc, Loc),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action291<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, GlobalBinding, Loc),
    __2: (Loc, Ident, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Ty, Loc),
    __5: (Loc, Token, Loc),
    __6: (Loc, Loc, Loc),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

fn __action292<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, EntryPointStage, Loc),
    __2: (Loc, Ident, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Token, Loc),
    __5: (Loc, Loc, Loc),
    __6: (Loc, Block, Loc),
    __7: (Loc, Loc, Loc),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __start1 = __2.2.clone();
    let __end1 = __3.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action170(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action4(
        __temp0,
        __0,
        __1,
        __2,
        __temp1,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

fn __action293<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, Generics, Loc),
    __3: (Loc, Function, Loc),
    __4: (Loc, Loc, Loc),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

fn __action294<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, Constant, Loc),
    __3: (Loc, Loc, Loc),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action295<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ident, Loc),
    __3: (Loc, FnSig, Loc),
    __4: (Loc, Loc, Loc),
    __5: (Loc, Token, Loc),
) -> Item
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action7(
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

fn __action296<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action211(
        __temp0,
        __0,
        __1,
    )
}

fn __action297<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        __temp0,
        __0,
        __1,
    )
}

fn __action298<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action202(
        __temp0,
        __0,
        __1,
    )
}

fn __action299<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        __temp0,
        __0,
        __1,
    )
}

fn __action300<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action199(
        __temp0,
        __0,
        __1,
    )
}

fn __action301<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        __temp0,
        __0,
        __1,
    )
}

fn __action302<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        __temp0,
        __0,
        __1,
    )
}

fn __action303<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action190(
        __temp0,
        __0,
        __1,
    )
}

fn __action304<
>(
    __0: (Loc, BinaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        __temp0,
        __0,
        __1,
    )
}

fn __action305<
>(
    __0: (Loc, UnaryOp, Loc),
    __1: (Loc, Loc, Loc),
) -> Spanned<UnaryOp>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        __temp0,
        __0,
        __1,
    )
}

fn __action306<
>(
    __0: (Loc, StmtKind, Loc),
    __1: (Loc, Loc, Loc),
) -> Stmt
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        __temp0,
        __0,
        __1,
    )
}

fn __action307<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ty, Loc),
    __3: (Loc, Loc, Loc),
) -> StructField
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action13(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action308<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action309<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action310<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action132(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action311<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action312<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action313<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action314<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action315<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action140(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action316<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action124(
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

fn __action317<
>(
    __0: (Loc, TypeKind, Loc),
    __1: (Loc, Loc, Loc),
) -> Ty
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action22(
        __temp0,
        __0,
        __1,
    )
}

fn __action318<
>(
    __0: (Loc, Spanned<UnaryOp>, Loc),
    __1: (Loc, Box<Expr>, Loc),
    __2: (Loc, Loc, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action170(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        __temp0,
        __0,
        __1,
        __2,
    )
}

fn __action319<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Field, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action320<
>(
    __0: (Loc, ExprKind, Loc),
) -> Expr
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action273(
        __0,
        __temp0,
    )
}

fn __action321<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::option::Option<Stmt>, Loc),
    __2: (Loc, Token, Loc),
) -> Block
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action274(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action322<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::vec::Vec<Stmt>, Loc),
    __2: (Loc, ::std::option::Option<Stmt>, Loc),
    __3: (Loc, Token, Loc),
) -> Block
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action275(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action323<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Vec<Expr>, Loc),
    __3: (Loc, Token, Loc),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action324<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ExprKind, Loc),
) -> Block
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        __0,
        __1,
        __temp0,
    )
}

fn __action325<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Expr, Loc),
    __3: (Loc, Block, Loc),
) -> ElseIf
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action278(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action326<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::option::Option<Box<Expr>>, Loc),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action279(
        __0,
        __1,
        __temp0,
    )
}

fn __action327<
>(
    __0: (Loc, FieldKind, Loc),
) -> Field
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action280(
        __0,
        __temp0,
    )
}

fn __action328<
>(
    __0: (Loc, Expr, Loc),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        __0,
        __temp0,
    )
}

fn __action329<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Vec<IdentTypePair>, Loc),
    __2: (Loc, Token, Loc),
    __3: (Loc, ::std::option::Option<Ty>, Loc),
) -> FnSig
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action282(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action330<
>(
    __0: (Loc, GenericBoundKind, Loc),
) -> GenericBound
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        __0,
        __temp0,
    )
}

fn __action331<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, GenericBound, Loc),
) -> GenericParam
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action284(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action332<
>(
    __0: (Loc, Ident, Loc),
) -> GenericParam
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action285(
        __0,
        __temp0,
    )
}

fn __action333<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Vec<GenericParam>, Loc),
    __2: (Loc, Token, Loc),
) -> Generics
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action334<
>(
    __0: (Loc, Symbol, Loc),
) -> Ident
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        __0,
        __temp0,
    )
}

fn __action335<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ty, Loc),
) -> IdentTypePair
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action288(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action336<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Box<Expr>, Loc),
    __3: (Loc, Token, Loc),
) -> Expr
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action289(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action337<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, StructKind, Loc),
) -> Item
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action290(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action338<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, GlobalBinding, Loc),
    __2: (Loc, Ident, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Ty, Loc),
    __5: (Loc, Token, Loc),
) -> Item
{
    let __start0 = __5.2.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action291(
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

fn __action339<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, EntryPointStage, Loc),
    __2: (Loc, Ident, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Token, Loc),
    __5: (Loc, Block, Loc),
) -> Item
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __start1 = __5.2.clone();
    let __end1 = __5.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action169(
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action292(
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __temp1,
    )
}

fn __action340<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, Generics, Loc),
    __3: (Loc, Function, Loc),
) -> Item
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action293(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action341<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Ident, Loc),
    __2: (Loc, Constant, Loc),
) -> Item
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action294(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action342<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ident, Loc),
    __3: (Loc, FnSig, Loc),
    __4: (Loc, Token, Loc),
) -> Item
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

fn __action343<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        __0,
        __temp0,
    )
}

fn __action344<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action297(
        __0,
        __temp0,
    )
}

fn __action345<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action298(
        __0,
        __temp0,
    )
}

fn __action346<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action299(
        __0,
        __temp0,
    )
}

fn __action347<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action300(
        __0,
        __temp0,
    )
}

fn __action348<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action301(
        __0,
        __temp0,
    )
}

fn __action349<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action302(
        __0,
        __temp0,
    )
}

fn __action350<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        __0,
        __temp0,
    )
}

fn __action351<
>(
    __0: (Loc, BinaryOp, Loc),
) -> Spanned<BinaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action304(
        __0,
        __temp0,
    )
}

fn __action352<
>(
    __0: (Loc, UnaryOp, Loc),
) -> Spanned<UnaryOp>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action305(
        __0,
        __temp0,
    )
}

fn __action353<
>(
    __0: (Loc, StmtKind, Loc),
) -> Stmt
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action306(
        __0,
        __temp0,
    )
}

fn __action354<
>(
    __0: (Loc, Ident, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Ty, Loc),
) -> StructField
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action355<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action308(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action356<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action357<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action310(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action358<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action311(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action359<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action312(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action360<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action313(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action361<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action362<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action315(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action363<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action316(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action364<
>(
    __0: (Loc, TypeKind, Loc),
) -> Ty
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action317(
        __0,
        __temp0,
    )
}

fn __action365<
>(
    __0: (Loc, Spanned<UnaryOp>, Loc),
    __1: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action169(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action318(
        __0,
        __1,
        __temp0,
    )
}

fn __action366<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Field, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action120(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action319(
        __temp0,
        __1,
        __2,
    )
}

fn __action367<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action207(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action356(
        __0,
        __1,
        __temp0,
    )
}

fn __action368<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action204(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action358(
        __0,
        __1,
        __temp0,
    )
}

fn __action369<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action198(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action359(
        __0,
        __1,
        __temp0,
    )
}

fn __action370<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action201(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action357(
        __0,
        __1,
        __temp0,
    )
}

fn __action371<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Vec<Expr>, Loc),
    __3: (Loc, Token, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action119(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action323(
        __temp0,
        __1,
        __2,
        __3,
    )
}

fn __action372<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action195(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action360(
        __0,
        __1,
        __temp0,
    )
}

fn __action373<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action192(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action361(
        __0,
        __1,
        __temp0,
    )
}

fn __action374<
>(
    __0: (Loc, Expr, Loc),
) -> ::std::option::Option<Box<Expr>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action144(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        __temp0,
    )
}

fn __action375<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Expr, Loc),
    __2: (Loc, Block, Loc),
    __3: (Loc, Block, Loc),
) -> ExprKind
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action144(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        __0,
        __temp0,
        __2,
        __3,
    )
}

fn __action376<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Expr, Loc),
    __3: (Loc, Token, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action144(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action336(
        __0,
        __1,
        __temp0,
        __3,
    )
}

fn __action377<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action374(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action326(
        __0,
        __temp0,
    )
}

fn __action378<
>(
    __0: (Loc, Token, Loc),
) -> Expr
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action143(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action326(
        __0,
        __temp0,
    )
}

fn __action379<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Expr, Loc),
    __3: (Loc, Token, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action121(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        __temp0,
        __1,
        __2,
        __3,
    )
}

fn __action380<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action189(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action362(
        __0,
        __1,
        __temp0,
    )
}

fn __action381<
>(
    __0: (Loc, Box<Expr>, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action210(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action355(
        __0,
        __1,
        __temp0,
    )
}

fn __action382<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action212(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        __temp0,
        __1,
        __2,
    )
}

fn __action383<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action209(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action367(
        __temp0,
        __1,
        __2,
    )
}

fn __action384<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action203(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action370(
        __temp0,
        __1,
        __2,
    )
}

fn __action385<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action206(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action368(
        __temp0,
        __1,
        __2,
    )
}

fn __action386<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action200(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action369(
        __temp0,
        __1,
        __2,
    )
}

fn __action387<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action197(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action372(
        __temp0,
        __1,
        __2,
    )
}

fn __action388<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action194(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action373(
        __temp0,
        __1,
        __2,
    )
}

fn __action389<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action191(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        __temp0,
        __1,
        __2,
    )
}

fn __action390<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Box<Expr>, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action214(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action363(
        __temp0,
        __1,
        __2,
    )
}

fn __action391<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, Spanned<BinaryOp>, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action122(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action390(
        __0,
        __1,
        __temp0,
    )
}

fn __action392<
>(
    __0: (Loc, Spanned<UnaryOp>, Loc),
    __1: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action122(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action365(
        __0,
        __temp0,
    )
}

fn __action393<
>(
    __0: (Loc, Expr, Loc),
) -> Vec<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action215(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action250(
        __temp0,
    )
}

fn __action394<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Vec<Expr>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action216(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action250(
        __temp0,
    )
}

fn __action395<
>(
    __0: (Loc, ::std::vec::Vec<Expr>, Loc),
    __1: (Loc, Expr, Loc),
) -> Vec<Expr>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action215(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action251(
        __0,
        __temp0,
    )
}

fn __action396<
>(
    __0: (Loc, ::std::vec::Vec<Expr>, Loc),
) -> Vec<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action216(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action251(
        __0,
        __temp0,
    )
}

fn __action397<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Stmt, Loc),
    __2: (Loc, Token, Loc),
) -> Block
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action148(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action321(
        __0,
        __temp0,
        __2,
    )
}

fn __action398<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
) -> Block
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action149(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action321(
        __0,
        __temp0,
        __1,
    )
}

fn __action399<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::vec::Vec<Stmt>, Loc),
    __2: (Loc, Stmt, Loc),
    __3: (Loc, Token, Loc),
) -> Block
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action148(
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action322(
        __0,
        __1,
        __temp0,
        __3,
    )
}

fn __action400<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, ::std::vec::Vec<Stmt>, Loc),
    __2: (Loc, Token, Loc),
) -> Block
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action149(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action322(
        __0,
        __1,
        __temp0,
        __2,
    )
}

fn __action401<
>(
    __0: (Loc, GenericParam, Loc),
) -> Vec<GenericParam>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action224(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action254(
        __temp0,
    )
}

fn __action402<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Vec<GenericParam>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action225(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action254(
        __temp0,
    )
}

fn __action403<
>(
    __0: (Loc, ::std::vec::Vec<GenericParam>, Loc),
    __1: (Loc, GenericParam, Loc),
) -> Vec<GenericParam>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action224(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        __0,
        __temp0,
    )
}

fn __action404<
>(
    __0: (Loc, ::std::vec::Vec<GenericParam>, Loc),
) -> Vec<GenericParam>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action225(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        __0,
        __temp0,
    )
}

fn __action405<
>(
    __0: (Loc, IdentTypePair, Loc),
) -> Vec<IdentTypePair>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action175(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        __temp0,
    )
}

fn __action406<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Vec<IdentTypePair>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action176(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        __temp0,
    )
}

fn __action407<
>(
    __0: (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
    __1: (Loc, IdentTypePair, Loc),
) -> Vec<IdentTypePair>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action175(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        __0,
        __temp0,
    )
}

fn __action408<
>(
    __0: (Loc, ::std::vec::Vec<IdentTypePair>, Loc),
) -> Vec<IdentTypePair>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action176(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        __0,
        __temp0,
    )
}

fn __action409<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> ::std::vec::Vec<Item>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action171(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        __temp0,
    )
}

fn __action410<
>(
    __0: (Loc, ::std::vec::Vec<Item>, Loc),
) -> ::std::vec::Vec<Item>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action172(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        __temp0,
    )
}

fn __action411<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Vec<IdentTypePair>, Loc),
    __2: (Loc, Token, Loc),
    __3: (Loc, Ty, Loc),
) -> FnSig
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action166(
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action329(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action412<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Vec<IdentTypePair>, Loc),
    __2: (Loc, Token, Loc),
) -> FnSig
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action167(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action329(
        __0,
        __1,
        __2,
        __temp0,
    )
}

fn __action413<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Vec<Ty>, Loc),
    __3: (Loc, Token, Loc),
    __4: (Loc, Ty, Loc),
) -> GenericBoundKind
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action166(
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action414<
>(
    __0: (Loc, Token, Loc),
    __1: (Loc, Token, Loc),
    __2: (Loc, Vec<Ty>, Loc),
    __3: (Loc, Token, Loc),
) -> GenericBoundKind
{
    let __start0 = __3.2.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action167(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

fn __action415<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action343(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        __0,
        __temp0,
        __2,
    )
}

fn __action416<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action344(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action383(
        __0,
        __temp0,
        __2,
    )
}

fn __action417<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action345(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action384(
        __0,
        __temp0,
        __2,
    )
}

fn __action418<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action346(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action385(
        __0,
        __temp0,
        __2,
    )
}

fn __action419<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action347(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action386(
        __0,
        __temp0,
        __2,
    )
}

fn __action420<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action348(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action387(
        __0,
        __temp0,
        __2,
    )
}

fn __action421<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action349(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action388(
        __0,
        __temp0,
        __2,
    )
}

fn __action422<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action350(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action389(
        __0,
        __temp0,
        __2,
    )
}

fn __action423<
>(
    __0: (Loc, Expr, Loc),
    __1: (Loc, BinaryOp, Loc),
    __2: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action351(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action391(
        __0,
        __temp0,
        __2,
    )
}

fn __action424<
>(
    __0: (Loc, UnaryOp, Loc),
    __1: (Loc, Expr, Loc),
) -> Expr
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action352(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action392(
        __temp0,
        __1,
    )
}

fn __action425<
>(
    __0: (Loc, StructField, Loc),
) -> Vec<StructField>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action229(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action266(
        __temp0,
    )
}

fn __action426<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Vec<StructField>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action230(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action266(
        __temp0,
    )
}

fn __action427<
>(
    __0: (Loc, ::std::vec::Vec<StructField>, Loc),
    __1: (Loc, StructField, Loc),
) -> Vec<StructField>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action229(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        __0,
        __temp0,
    )
}

fn __action428<
>(
    __0: (Loc, ::std::vec::Vec<StructField>, Loc),
) -> Vec<StructField>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action230(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        __0,
        __temp0,
    )
}

fn __action429<
>(
    __0: (Loc, Ty, Loc),
) -> Vec<Ty>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action182(
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action270(
        __temp0,
    )
}

fn __action430<
>(
    __lookbehind: &Loc,
    __lookahead: &Loc,
) -> Vec<Ty>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action183(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action270(
        __temp0,
    )
}

fn __action431<
>(
    __0: (Loc, ::std::vec::Vec<Ty>, Loc),
    __1: (Loc, Ty, Loc),
) -> Vec<Ty>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action182(
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action271(
        __0,
        __temp0,
    )
}

fn __action432<
>(
    __0: (Loc, ::std::vec::Vec<Ty>, Loc),
) -> Vec<Ty>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action183(
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action271(
        __0,
        __temp0,
    )
}

pub trait __ToTriple<> {
    fn to_triple(value: Self) -> Result<(Loc,Token,Loc), __lalrpop_util::ParseError<Loc, Token, LexerError>>;
}

impl<> __ToTriple<> for (Loc, Token, Loc) {
    fn to_triple(value: Self) -> Result<(Loc,Token,Loc), __lalrpop_util::ParseError<Loc, Token, LexerError>> {
        Ok(value)
    }
}
impl<> __ToTriple<> for Result<(Loc, Token, Loc), LexerError> {
    fn to_triple(value: Self) -> Result<(Loc,Token,Loc), __lalrpop_util::ParseError<Loc, Token, LexerError>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
